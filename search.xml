<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GOF23</title>
    <url>/2019/10/20/COF23/</url>
    <content><![CDATA[<p><font color="yellow"> <strong>创建型模式：</strong> 单例模式、工厂模式、抽象工厂模式、建造者模式、原型模式</font></p>
<p><font color="yellow"> <strong>结构型模式：</strong> 适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式</font></p>
<p><font color="yellow"> <strong>行为型模式：</strong> 板块方法模块、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式、访问者模式</font></p>
<ul>
<li>模式动机</li>
<li>模式定义</li>
<li>模式结构</li>
<li>模式分析 优点 缺点</li>
<li>适用环境</li>
<li>模式扩展（可以相比较的）<br><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/creational.html" target="_blank" rel="noopener">https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/creational.html</a></li>
</ul>
<h2 id="1-备忘录模式memento"><a href="#1-备忘录模式memento" class="headerlink" title="1. 备忘录模式memento"></a>1. 备忘录模式memento</h2><blockquote>
<ul>
<li>自动保存功能（定时备份）// 方便恢复文档</li>
<li>撤回功能 </li>
</ul>
</blockquote>
<blockquote>
<p>核心：某个对象内部 <strong>状态</strong> 的拷贝<br>结构： 源发器类Originator  备忘录类Memento  负责人类 CareTake</p>
</blockquote>
<h2 id="2-观察者模式"><a href="#2-观察者模式" class="headerlink" title="2.观察者模式"></a>2.观察者模式</h2><blockquote>
<ul>
<li>广播机制的场景</li>
<li>监控器（见好就收？）</li>
<li>订阅了某一个栏目或者主题（定时发送）</li>
<li>AWT事件处理也是！（监听）</li>
</ul>
</blockquote>
<blockquote>
<p>核心:及时更新(观察者接口就只写updates)<br>JavaSE提供了 util包里面有Observable和Observer来实现观察者模式</p>
</blockquote>
<h2 id="3-状态模式"><a href="#3-状态模式" class="headerlink" title="3.状态模式"></a>3.状态模式</h2><blockquote>
<ul>
<li>红绿灯</li>
<li>网上购物，订单状态</li>
<li>电梯的状态</li>
<li>审批状态（国奖）</li>
<li>酒店预定</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>核心：当遇到需要频繁改变状态时，解决复杂对象的状态转换以及不同状态下行为的封装问题</li>
</ul>
</blockquote>
<h2 id="4-策略模式"><a href="#4-策略模式" class="headerlink" title="4.策略模式"></a>4.策略模式</h2><blockquote>
<ul>
<li>根据不同客户类型实施不同的报价策略（杀熟的感觉）<br>如果系统中某个类的对象存在多种状态，不同状态下行为有差异，而且这些状态之间可以发生转换时使用状态模式；如果系统中某个类的某一行为存在多种实现方式，而且这些实现方式可以互换时使用策略模式。</li>
</ul>
</blockquote>
<h2 id="5-解释器模式-非常不常用，最好不用，后期难以维护"><a href="#5-解释器模式-非常不常用，最好不用，后期难以维护" class="headerlink" title="5.解释器模式(非常不常用，最好不用，后期难以维护)"></a>5.解释器模式(非常不常用，最好不用，后期难以维护)</h2><blockquote>
<ul>
<li>“1+2*3”实现内部的计算 可以直接使用jruby、Groovy、Java的js引擎来代替解释器的作用</li>
<li>这个都可以做到自己去开发一种语言了</li>
</ul>
</blockquote>
<h2 id="6-命令模式（不重要）"><a href="#6-命令模式（不重要）" class="headerlink" title="6.命令模式（不重要）"></a>6.命令模式（不重要）</h2><h2 id="7-建造者模式"><a href="#7-建造者模式" class="headerlink" title="7.建造者模式"></a>7.建造者模式</h2><blockquote>
<ul>
<li>建造一个复杂的产品时</li>
<li>构建和装配的解耦</li>
</ul>
</blockquote>
<h2 id="8-原型模式（拷贝模式）"><a href="#8-原型模式（拷贝模式）" class="headerlink" title="8.原型模式（拷贝模式）"></a>8.原型模式（拷贝模式）</h2>]]></content>
      <categories>
        <category>后台开发</category>
      </categories>
  </entry>
  <entry>
    <title>论文阅读DrImpute</title>
    <url>/2020/04/03/DrImpute/</url>
    <content><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h4 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h4><h4 id="1-preprocess：data-cleansing-normalization-and-log-transformation"><a href="#1-preprocess：data-cleansing-normalization-and-log-transformation" class="headerlink" title="1. preprocess：data cleansing, normalization, and log transformation"></a>1. <strong>preprocess：</strong>data cleansing, normalization, and log transformation</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">preprocess &lt;- <span class="keyword">function</span>(x, min.expressed.gene = <span class="number">0</span>, min.expressed.cell = <span class="number">2</span>, max.expressed.ratio = <span class="number">1</span>, normalize.by.size.effect = <span class="literal">FALSE</span>)&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (class(x) == <span class="string">'SummarizedExperiment'</span>)</span><br><span class="line">		X &lt;- assays(x)$count</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (class(x) == <span class="string">'matrix'</span>)</span><br><span class="line">		X &lt;- x</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (is(x, <span class="string">'sparseMatrix'</span>))</span><br><span class="line">		X &lt;- x</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">stop</span>(sprintf(<span class="string">'unknown class(x): %s'</span>, class(x)))</span><br><span class="line"></span><br><span class="line">	M &lt;- ncol(X)</span><br><span class="line">	N &lt;- nrow(X)</span><br><span class="line">	m &lt;- Matrix::colSums(X &gt; <span class="number">1</span>) &gt;= min.expressed.gene	<span class="comment"># cells that have at least min.expressed.gene expreseed genes</span></span><br><span class="line">	n &lt;- Matrix::rowSums(X &gt; <span class="number">1</span>) &lt;= max.expressed.ratio * M &amp; Matrix::rowSums(X &gt; <span class="number">1</span>) &gt;= min.expressed.cell	<span class="comment"># genes that are detected in at least min.expressed.cell or at most max.expressed.ratio cells</span></span><br><span class="line">	<span class="keyword">if</span> (normalize.by.size.effect)&#123;</span><br><span class="line">	  sf &lt;- apply((X[n, m] + <span class="number">1</span>) / exp(Matrix::rowMeans(log(X[n, m] + <span class="number">1</span>))), <span class="number">2</span>, median)</span><br><span class="line">		X &lt;- t(t(X[n, m]) / sf)</span><br><span class="line">	&#125;<span class="keyword">else</span></span><br><span class="line">		X &lt;- X[n, m]</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (class(x) == <span class="string">'SummarizedExperiment'</span>)&#123;</span><br><span class="line">		x &lt;- x[n, m]</span><br><span class="line">		assays(x)$count &lt;- X</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (class(x) == <span class="string">'matrix'</span>)&#123;</span><br><span class="line">		x &lt;- as.matrix(X)</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (is(x, <span class="string">'sparseMatrix'</span>))&#123;</span><br><span class="line">		x &lt;- X</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-calculating-the-distance-matrix-among-cells"><a href="#2-calculating-the-distance-matrix-among-cells" class="headerlink" title="2.  calculating the distance matrix among cells"></a>2.  calculating the distance matrix among cells</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">dist2 &lt;- <span class="keyword">function</span>(X, method)&#123;</span><br><span class="line">	<span class="keyword">if</span> (method == <span class="string">'spearman'</span>)</span><br><span class="line">		D &lt;- as.matrix(<span class="number">1</span> - cor(as.matrix(X), method = <span class="string">'spearman'</span>))</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (method == <span class="string">"pearson"</span>)</span><br><span class="line">		D &lt;- as.matrix(<span class="number">1</span> - cor(as.matrix(X), method = <span class="string">'pearson'</span>))</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (method == <span class="string">"euclidean"</span>) </span><br><span class="line">		D &lt;- as.matrix(dist(t(as.matrix(X)), method = <span class="string">'euclidean'</span>))</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">stop</span>(sprintf(<span class="string">'unknown method: %s'</span>, method))</span><br><span class="line">	D</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-imputing-the-dropout-entries-based-on-the-clustering-results"><a href="#3-imputing-the-dropout-entries-based-on-the-clustering-results" class="headerlink" title="3.  imputing the dropout entries based on the clustering results"></a>3.  imputing the dropout entries based on the clustering results</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">DrImpute &lt;- <span class="keyword">function</span>(X, ks = <span class="number">10</span>:<span class="number">15</span>, dists = c(<span class="string">'spearman'</span>, <span class="string">'pearson'</span>), batch.size = <span class="literal">NA</span>, mc.cores = <span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">	N &lt;- nrow(X)	<span class="comment"># number of genes</span></span><br><span class="line">	M &lt;- ncol(X) 	<span class="comment"># number of cells</span></span><br><span class="line">	cat(sprintf(<span class="string">'[%s] number of cells: %d\n'</span>, Sys.time(), M))</span><br><span class="line">	cat(sprintf(<span class="string">'[%s] number of genes: %d\n'</span>, Sys.time(), N))</span><br><span class="line"></span><br><span class="line">	is.zero &lt;- as(X == <span class="number">0</span>, <span class="string">'lgeMatrix'</span>)	<span class="comment"># dense logical matrix for zero and weakly detected events # 零和弱检测事件的密集逻辑矩阵</span></span><br><span class="line"></span><br><span class="line">	is.expressed &lt;- as(X &gt; log(<span class="number">1</span> + <span class="number">5</span>), <span class="string">'lgeMatrix'</span>) <span class="comment"># dense logical matrix for robustly expressed events # 鲁棒表示事件的密集逻辑矩阵</span></span><br><span class="line">	cat(sprintf(<span class="string">'[%s] %% zero events (X=0): %.1f%%\n'</span>, Sys.time(), sum(is.zero) / (N * M) * <span class="number">100</span>))</span><br><span class="line">	cat(sprintf(<span class="string">'[%s] %% robustly expressed events (X&gt;5): %.1f%%\n'</span>, Sys.time(), sum(is.expressed) / (N * M) * <span class="number">100</span>))</span><br><span class="line">	<span class="keyword">if</span> (!is.na(batch.size))&#123;</span><br><span class="line">		cat(sprintf(<span class="string">'[%s] batch size: %d cells\n'</span>, Sys.time(), batch.size))</span><br><span class="line">	&#125;</span><br><span class="line">	cat(sprintf(<span class="string">'[%s] # of CPU cores: %d\n'</span>, Sys.time(), mc.cores))</span><br><span class="line"></span><br><span class="line">	X &lt;- estimate.expression(X, ks = ks, dists = dists, mc.cores = mc.cores, batch.size = batch.size)</span><br><span class="line">	is.zero &lt;- as(X == <span class="number">0</span>, <span class="string">'lgeMatrix'</span>)	<span class="comment"># dense logical matrix for zero indicators</span></span><br><span class="line">	cat(sprintf(<span class="string">'[%s] %% zero events after imputation: %.1f%%\n'</span>, Sys.time(), sum(is.zero) / (N * M) * <span class="number">100</span>))</span><br><span class="line">	X</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-averaging-all-imputation-results-to-determine-the-final-imputation"><a href="#4-averaging-all-imputation-results-to-determine-the-final-imputation" class="headerlink" title="4.  averaging all imputation results to determine the final imputation."></a>4.  averaging all imputation results to determine the final imputation.</h4><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><h3 id="Experiment-1："><a href="#Experiment-1：" class="headerlink" title="Experiment 1："></a>Experiment 1：</h3><p><strong>Method:</strong><br>the <strong>cell-cell</strong> distance matrix was computed using <strong>Spearman and Pearson correlations</strong>, followed by the <strong>cell-wise clustering</strong> based upon the distance matrix over a range of expected number of clusters k (k ranging from 10 to 15 by default).</p>
<p><strong>Evaluation indicators:</strong><br>To generate the dropout zero, we randomly <strong>down-sampled</strong> the raw sequencing reads to 10, 15, 25, 40 and 63%f the total number of reads</p>
<p><strong>Evaluation indicators:<br>F1 score</strong></p>
<h3 id="Experiment-2"><a href="#Experiment-2" class="headerlink" title="Experiment 2"></a>Experiment 2</h3><p><strong>Method:</strong><br>The effect of cell clustering.<br> For each dataset, we randomly sampled 100 genes (<strong>down-sampling</strong>), or one-third of the total cells (down-sampling), and we clustered the cells using each of the clustering methods with and without preprocessing the down-sampled dataset using DrImpute. This process was <strong>repeated 100</strong> times, and we compared how consistent the clustering results were after down-sampling the genes or cells as measured by cross ARI<br><strong>Evaluation indicators:<br>ARI</strong></p>
<h3 id="Experiment-3"><a href="#Experiment-3" class="headerlink" title="Experiment 3"></a>Experiment 3</h3><p><strong>Method:</strong><br>To evaluate the accuracy of the <strong>dimension reduction</strong> in 2D space, we first estimated how discriminatively the cells from one population (using the class label reported in the original publication) separated from other populations in 2D space. For each dimension reduction result</p>
<p><strong>Evaluation indicators:</strong><br>we used the 2D coordinates of 90% of cells as the feature to train a linear support vector machine (SVM) classifier,and we predicted the class label for the remaining 10%of the cells. The above process was repeated ten times,and the overall prediction accuracy (10-fold cross validation accuracy) was used to quantitatively measure the separation of different populations in 2D space.// 这块没有讲清楚</p>
<h3 id="Experiment-4"><a href="#Experiment-4" class="headerlink" title="Experiment 4"></a>Experiment 4</h3><p>重建谱系轨迹，推断单细胞的分化和祖细胞状态。(老师也不是很明白)</p>
<h2 id="数据集："><a href="#数据集：" class="headerlink" title="数据集："></a>数据集：</h2><p>scRNA-seq datasets</p>
<p><strong>cell labels</strong><br>“gold”：experimental conditions or cell lines（细胞系）<br>“silver”： derived and assigned by the authors’ knowledge of the underlying biology.<br>“bronze”:  developmental stages (time labels)</p>
]]></content>
      <categories>
        <category>ML&amp;DL</category>
      </categories>
      <tags>
        <tag>Dropouts课题(刘世超老师)</tag>
      </tags>
  </entry>
  <entry>
    <title>Java开发规范(重点选取）</title>
    <url>/2019/12/08/Java%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83(%E9%87%8D%E7%82%B9%E9%80%89%E5%8F%96%EF%BC%89/</url>
    <content><![CDATA[<h2 id="工程结构"><a href="#工程结构" class="headerlink" title="工程结构"></a>工程结构</h2><ul>
<li>只要没有<strong>唯一索引</strong>,根据墨菲定律,必然有<strong>脏数据</strong>产生</li>
<li><strong>有缺陷的底层数据结构容易导致系统风险上升</strong>,可扩展性下降,重构成本也会因历史数据迁移和系统平滑过渡而陡然增加,所以,存储方案和数据结构需要认真地进行设计和评审,生产环境提交执行后, 需要进行 double check。<h4 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h4></li>
<li>如果<strong>某个业务对象的状态超过 3 个</strong>,使用<strong>状态图</strong>来表达并且明确状态变化的各个触发条件。<blockquote>
<p>说明:状态图的核心是对象状态,首先明确对象有多少种状态,然后明确两两状态之间是否存在直接转换 关系,再明确触发状态转换的条件是什么。 正例:淘宝订单状态有已下单、待付款、已付款、待发货、已发货、已收货等。比如已下单与已收货这两种状态之间是不可能有直接转换关系的。</p>
</blockquote>
</li>
<li>如果系统中某个功能的<strong>调用链路上</strong>的涉及对象超过 3 个,使用<strong>时序图</strong>来表达并且明确各调用环节的输入与输出。时序图反映了一系列对象间的交互与协作关系,清晰立体地反映系统的调用纵深链路。</li>
<li>如果系统中<strong>模型类</strong>超过 5 个,并且存在复杂的依赖关系,使用<strong>类图</strong>来表达并且明确类之间的关系。<blockquote>
<p>类图像建筑领域的施工图,如果搭平房,可能不需要,但如果建造蚂蚁 Z 空间大楼,肯定需要详细的施工图。</p>
</blockquote>
</li>
<li>如果系统中超过 2 个对象之间存在<strong>协作关系</strong>,并且需要表示复杂的处理流程,使用<strong>活动图</strong>来表示。活动图是流程图的扩展,增加了能够体现协作关系的对象泳道,支持表示并发等。</li>
<li><strong>不得已使用继承</strong>的话,必须符合<strong>里氏代换原则</strong><blockquote>
<p>此原则说父类能够出现的地方子类一定能够出现,比如,“把钱交出来”,钱的子类美元、欧元、人民币等都可以出现。</p>
</blockquote>
</li>
<li>根据<strong>依赖倒置原则</strong>,尽量依赖<strong>抽象类与接口</strong>,有利于扩展与维护。低层次模块依赖于高层次模块的抽象,方便系统间的<strong>解耦</strong>。<h4 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h4></li>
<li>系统设计时,<strong>注意对扩展开放,对修改闭合。</strong><blockquote>
<p>说明:极端情况下,<strong>交付线上生产环境的代码都是不可修改的</strong>,同一业务域内的需求变化,通过<strong>模块或类的扩展</strong>来实现。</p>
</blockquote>
</li>
<li>避免出现<strong>重复代码或重复配置</strong>的情况。说明:随着代码的重复次数不断增加,维护成本指数级上升。</li>
<li>系统设计主要目的是<strong>明确需求、理顺逻辑、后期维护</strong>,次要目的用于指导编码。</li>
<li>设计的本质就是识别和表达系统难点,找到系统的变化点,并隔离变化点。说明:世间众多设计模式目的是相同的,即<strong>隔离系统变化点。</strong></li>
<li>系统架构设计的<strong>目的</strong>:<br>确定系统<strong>边界</strong>。确定系统在技术层面上的做与不做。<br>确定系统内<strong>模块之间的关系</strong>。确定模块之间的<em>依赖关系</em>及模块的<em>宏观输入与输出</em>。<br>确定指导<strong>后续设计与演化</strong>的原则。使后续的子系统或模块设计在规定的框架内继续演化。<br>确定<strong>非功能性</strong>需求。非功能性需求是指<em>安全性、可用性、可扩展性</em>等。<ul>
<li>在做无障碍产品设计时(友好),需要考虑到:</li>
</ul>
</li>
</ul>
<ol>
<li>所有可交互的控件元素必须能被 tab 键聚焦,并且焦点顺序需符合自然操作逻辑。?</li>
<li>用于登陆校验和请求拦截的验证码均需提供<strong>图形验证以外</strong>的其它方式。</li>
<li>自定义的控件类型需明确<strong>交互方式</strong>。</li>
</ol>
<h2 id="安全规约"><a href="#安全规约" class="headerlink" title="安全规约"></a>安全规约</h2><ol>
<li>隶属于用户个人的页面或者功能必须进行<strong>权限控制校验</strong>。<blockquote>
<p>说明:防止没有做水平权限校验就可随意访问、修改、删除别人的数据,比如查看他人的私信内容、修改他人的订单。</p>
</blockquote>
</li>
<li>用户敏感数据禁止直接展示,必须对<strong>展示数据进行脱敏</strong>。<blockquote>
<p>说明:中国大陆个人手机号码显示为:137****0969,隐藏中间 4 位,防止隐私泄露。</p>
</blockquote>
</li>
</ol>
<ul>
<li>Java 代码用<strong>正则</strong>来验证客户端的输入,有些正则写法验证普通用户输入没有问题,但是如果<strong>攻击人员</strong>使用的是特殊构造的字符串来验证,有可能导致死循环的结果。</li>
</ul>
<ol start="3">
<li>在使用平台资源,譬如短信、邮件、电话、下单、支付,必须实现正确的防重放的机制,如<strong>数量限制、疲劳度控制、验证码校验,避免被滥刷</strong>而导致资损。<blockquote>
<p>说明:如注册时发送验证码到手机,如果没有限制次数和频率,那么可以利用此功能骚扰到其它用户,并造成短信平台资源浪费。(<del>太真实了</del> )</p>
</blockquote>
</li>
</ol>
<h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><ul>
<li>好的单元测试必须遵守 <strong>AIR 原则</strong>。<blockquote>
<p>说明:单元测试在线上运行时,感觉像空气(AIR)一样并不存在,但在测试质量的保障上,却是非常关键的。好的单元测试宏观上来说,具有<strong>自动化、独立性、可重复执行</strong>的特点。<br>A:Automatic(自动化)<br>I:Independent(独立性)<br>R:Repeatable(可重复)</p>
</blockquote>
</li>
<li>单元测试应该是<strong>全自动执行的,并且非交互式的。</strong>测试用例通常是被定期执行的,执行过程必须<strong>完全自动化</strong>才有意义。<em>输出结果需要人工检查的测试不是一个好的单元测试。</em>单元测试中不准使用 System.out 来进行人肉验证,必须使用 <strong>assert</strong> 来验证。</li>
<li><strong>保持单元测试的独立性。</strong>为了保证单元测试稳定可靠且便于维护,单元测试用例之间<strong>决不能互相调用</strong>,也不能<strong>依赖执行的先后次序。</strong></li>
<li>对于单元测试,要保证测<strong>试粒度</strong>足够小,有助于<em>精确定位问题。</em>单测粒度至多是类级别,一般是方法级别。<blockquote>
<p>说明:只有测试粒度小才能在出错时尽快定位到出错位置。单测不负责检查跨类或者跨系统的交互逻辑,那是<strong>集成测试的领域。</strong></p>
</blockquote>
</li>
<li>单元测试代码必须写在如下工程目录: <strong>src/test/java</strong> ,不允许写在业务代码目录下。<blockquote>
<p>说明:<em>源码编译时会跳过此目录,而单元测试框架默认是扫描此目录。</em></p>
</blockquote>
</li>
<li>单元测试的基本目标:语句<strong>覆盖率</strong>达到 70% ;核心模块的语句覆盖率和分支覆盖率都要达到 100%<blockquote>
<p>说明:在工程规约的应用分层中提到的 <strong>DAO 层,Manager 层</strong>可重用度高的 <strong>Service</strong>,都应该进行单元测试。</p>
</blockquote>
</li>
</ul>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><ul>
<li><strong>异常不要用来做流程控制,条件控制</strong><blockquote>
<p>说明:异常设计的初衷是解决程序运行中的各种意外情况,且异常的处理<strong>效率</strong>比条件判断方式要低很多。</p>
</blockquote>
</li>
<li>catch 时请分清<strong>稳定代码和非稳定代码</strong>,稳定代码指的是无论如何不会出错的代码。对于非稳定代码的 catch 尽可能进行区分异常类型,再做对应的异常处理。<blockquote>
<p>说明:对大段代码进行 try-catch,使程序无法根据不同的异常做出正确的<strong>应激反应</strong>,也<strong>不利于定位问题,这是一种不负责任的表现</strong>。</p>
</blockquote>
</li>
<li>不要在 finally 块中使用 return</li>
<li>避免出现重复的代码 (Don ‘ t Repeat Yourself) ,即 <strong>DRY 原则</strong>。说明:随意复制和粘贴代码,必然会导致代码的重复,在以后需要修改时,需要修改<strong>所有的副本,容易遗漏</strong>。必要时<strong>抽取共性方法</strong>,或者<strong>抽象公共类</strong>,甚至是<strong>组件化</strong>。</li>
</ul>
<h2 id="注释规约"><a href="#注释规约" class="headerlink" title="注释规约"></a>注释规约</h2><ul>
<li><strong>类、类属性、类方法</strong>的注释必须使用 Javadoc 规范,使用<code>/**内容*/</code>格式,不得使用<code>// xxx</code> 方式。</li>
<li>所有的抽象方法 ( 包括接口中的方法 ) 必须要用 Javadoc 注释、除了<strong>返回值、参数、异常说明</strong>外,还必须指出该方法<strong>做什么事情,实现什么功能</strong>。<blockquote>
<p>说明:对子类的实现要求,或者调用注意事项,请一并说明。</p>
</blockquote>
</li>
<li><strong>所有的类</strong>都必须添加<strong>创建者和创建日期</strong>。</li>
<li>方法内部单行注释,在被注释语句<strong>上方</strong>另起一行,使用<code>//</code>注释。方法内部多行注释使用<code>/* */</code>注释,注意<strong>与代码对齐</strong>。</li>
<li>所有的<strong>枚举类型</strong>字段<strong>必须要有注释</strong>,说明<strong>每个数据项的用途</strong>。</li>
<li>谨慎注释掉代码。在上方详细说明,而不是简单地注释掉。<strong>如果无用,则删除</strong>。<blockquote>
<p>说明:代码被注释掉有两种可能性:1)后续会恢复此段代码逻辑。2)永久不用。前者如果没有备注信息,难以知晓注释动机。后者建议直接删掉(代码仓库已然保存了历史代码)。</p>
</blockquote>
</li>
<li><strong>待办事宜(TODO)</strong>:(标记人,标记时间,[预计处理时间])表示需要实现,但目前还未实现的功能。这实际上是一个 Javadoc 的标签,目前的 Javadoc 还没有实现,但已经被广泛使用。只能应用于<strong>类,接口和方法</strong>(因为它是一个 Javadoc 标签)。<br>2) <strong>错误,不能工作(FIXME)</strong>:(标记人,标记时间,[预计处理时间])在注释中用 FIXME 标记某代码是错误的,而且不能工作,需要及时纠正的情况。</li>
</ul>
<h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><ul>
<li>在一个 switch 块内,每个 case 要么通过 continue/break/return 等来终止,要么注释说明程序将继续执行到哪一个 case 为止;在一个 switch 块内,都必须包含一个<strong>default</strong> 语句并且放在最后,即使它什么代码也没有。</li>
<li>在 if / else / for / while / do 语句中必须使用<strong>大括号</strong>。</li>
<li>在<strong>高并发场景中,避免使用“等于”判断作为中断或退出的条件</strong>。<blockquote>
<p>说明:如果并发控制没有处理好,容易产生等值判断被“击穿”的情况,<strong>使用大于或小于的区间判断条件来代替</strong>。反例:判断剩余奖品数量等于 0 时,终止发放奖品,但因为并发处理错误导致奖品数量瞬间变成了负数,这样的话,活动无法终止。</p>
</blockquote>
</li>
<li><strong>超过 3 层的 if-else</strong> 的逻辑判断代码可以使用<strong>卫语句、策略模式、状态模式</strong>等来实现,其中卫语句即代码逻辑先考虑失败、异常、中断、退出等直接返回的情况,以方法多个出口的方式,解决代码中判断分支嵌套的问题,这是逆向思维的体现。</li>
<li>除<strong>常用方法</strong>(如 getXxx/isXxx )等外,不要在条件判断中执行其它复杂的语句,将复杂逻辑判断的结果赋值给一个有意义的<strong>布尔变量名,以提高可读性</strong>。<blockquote>
<p>说明:很多 if 语句内的逻辑表达式相当复杂,与、或、取反混合运算,甚至各种方法纵深调用,理解成本非常高。如果赋值一个非常好理解的布尔变量名字,则是件<em>令人爽心悦目的事情。</em></p>
</blockquote>
</li>
</ul>
<hr>
<p>from：《阿里巴巴开发规范》</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>论文阅读DeepImpute</title>
    <url>/2020/04/03/DeepImpute/</url>
    <content><![CDATA[<h2 id="研究背景"><a href="#研究背景" class="headerlink" title="研究背景"></a>研究背景</h2><ol>
<li>RNA测序技术发展，通过<strong>转录组水平研究基因</strong>；</li>
<li>10X genomics公司，测序scRNA（ Fluidigm- and Drop-Seq-based methods ）；</li>
<li><strong>问题：</strong>每个细胞的<strong>mRNA拷贝起始量较低，因此scRNA序列数据非常嘈杂且不完整</strong>；</li>
<li>在一个scRNA序列实验中，经常观察到缺失值<strong>超过70%</strong>的数据集；</li>
<li><strong>零值的可能性：</strong>a.真零值；b.<strong>dropout</strong>，原始RNA转录物未能扩增所致；</li>
</ol>
<h2 id="已有的插补算法"><a href="#已有的插补算法" class="headerlink" title="已有的插补算法"></a>已有的插补算法</h2><ul>
<li><strong>MAGIC</strong>：建立<strong>马尔可夫转移矩阵</strong>并<strong>平滑数据</strong></li>
<li><strong>ScImpute</strong>：建立<strong>LASSO回归模型</strong>，对每个细胞迭代地进行补全/估算</li>
<li><strong>SAVER</strong>：是一个<strong>使用各种先验概率函数</strong>的<strong>基于贝叶斯的模型</strong></li>
<li><strong>DrImpute</strong>：是一种<strong>基于聚类</strong>的方法，它使用一致的策略:它用<strong>几个类的先验矩阵或距离矩阵</strong>估计一个值，然后用聚集法进行补全/估算</li>
<li><strong>VIPER</strong>：它着眼于<strong>细胞/细胞</strong>之间的相互作用，以适应每个细胞的<strong>线性模型</strong></li>
<li><strong>DCA</strong>：DCA构建了一个<strong>自动编码器</strong>，使用一个<strong>零膨胀负二项先验</strong>对<strong>基因分布</strong>进行建模，自动编码器试图预测基因的<strong>均值</strong>、<strong>标准差</strong>和<strong>丢失概率</strong>。但这些方法大多数都需要大量的运行时间，对更快，和可扩展的补全方法的需求也在不断增加。</li>
<li><strong>DeepImpute</strong>：<strong>分而治之</strong>的策略，构建多个亚/子神经网络，每个子神经网络都由四层组成。</li>
</ul>
<h2 id="DeepImpute的工作流程"><a href="#DeepImpute的工作流程" class="headerlink" title="DeepImpute的工作流程"></a>DeepImpute的工作流程</h2><ol>
<li>preprocessing</li>
<li>Architecture</li>
<li>training procedure</li>
<li>imputation<h3 id="Preprocessing预处理"><a href="#Preprocessing预处理" class="headerlink" title="Preprocessing预处理"></a>Preprocessing预处理</h3></li>
</ol>
<ul>
<li>根据方差/均值比（默认值为<strong>0.5</strong>）选择要进行插补的基因</li>
<li>把这些基因分成<strong>N个</strong>随机的亚群，每个亚群有S个基因数（默认情况下，<strong>S设置为512</strong>）</li>
<li>如果目标基因的数目不是这个数目的倍数，我们将要输入的基因的数目<strong>取整</strong>到深度神经网络的N+1子集中<h3 id="Network-architecture构建网络"><a href="#Network-architecture构建网络" class="headerlink" title="Network architecture构建网络"></a>Network architecture构建网络</h3></li>
<li>与目标基因相关的基因<strong>输入层</strong></li>
<li>具有校正线性单元（<strong>ReLU</strong>）激活功能的<strong>256个神经元完全连接的隐藏层</strong></li>
<li>Dropout layer: Dropout是在神经网络中用来解决过拟合问题的一种方法，dropout rate：比率被优化为20%，其他默认参数包括学习率为0.0001，批处理大小为64，子集大小为512。</li>
<li>S目标基因的<strong>输出层</strong><h3 id="Training-procedure"><a href="#Training-procedure" class="headerlink" title="Training procedure"></a>Training procedure</h3>The training starts by splitting the cells between a training (<strong>95%</strong>) and a test set (<strong>5%</strong>).<br>We use a <strong>weighted mean squared error加权均方误差 (MSE) loss function</strong> that gives higher weights to genes with higher expression values.<h3 id="Imputation插补"><a href="#Imputation插补" class="headerlink" title="Imputation插补"></a>Imputation插补</h3></li>
<li>Once the network weights are properly trained, we impute the data by filling zeros in the original matrix with the imputed values.一旦<strong>网络权值</strong>经过适当的训练，我们就可以通过在原始矩阵中填充零来输入数据。</li>
</ul>
<h3 id="数据来源："><a href="#数据来源：" class="headerlink" title="数据来源："></a>数据来源：</h3><p>四个公开可用的<strong>scRNA序列数据集</strong></p>
<h2 id="results"><a href="#results" class="headerlink" title="results"></a>results</h2><h3 id="Mask"><a href="#Mask" class="headerlink" title="Mask"></a>Mask</h3><p>随机掩盖(用零替换) 数据集表达矩阵的一部分，然后测量被掩盖数据的补全值和实际值之间的差异。<br>指标：相关系数和均方差</p>
<h3 id="RNA-FISH（湿实验）"><a href="#RNA-FISH（湿实验）" class="headerlink" title="RNA FISH（湿实验）"></a>RNA FISH（湿实验）</h3><p>对于相同的基因列表，使用其RNA FISH与估算后的基因（或原始scRNA-seq数据）的GINI系数进行比较<br>指标：比较RNA FISH和原始scRNA-seq数据之间的相关系数、均方差<br>结果：DeepImpute最优，DCA其次</p>
<h3 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h3><p>使用由48,267个来自小鼠的带注释的初级视觉皮层细胞组成实验数据集(Hrvatin)，这些细胞有33个先前的细胞类型标签。使用Scanpy工具包结合Leiden聚类算法进行细胞聚类，<br>评判聚类准确性指标：调整后的兰德指数(ARI)，调整后的相互评(AMS)、福克斯-马洛指数(FMI) 和 轮廓指数(SI)，<br>结论：DeepImpute方法这些指标提升较多，DCA少量提升，其它效果不佳</p>
]]></content>
      <categories>
        <category>ML&amp;DL</category>
      </categories>
      <tags>
        <tag>Dropouts课题(刘世超老师)</tag>
      </tags>
  </entry>
  <entry>
    <title>JShell容易出现错误之处</title>
    <url>/2020/04/03/JShell%E5%AE%B9%E6%98%93%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF%E4%B9%8B%E5%A4%84/</url>
    <content><![CDATA[<h3 id="注意事项-amp-可能存在的问题"><a href="#注意事项-amp-可能存在的问题" class="headerlink" title="注意事项&amp;可能存在的问题"></a>注意事项&amp;可能存在的问题</h3><ul>
<li>不要调⽤<strong>Runtime类</strong>直接使⽤<strong>系统的shell命令</strong></li>
<li>编码要求使⽤<strong>uft-8</strong>编码</li>
<li>echo、grep没有处理 \n<strong>转义字符的问题</strong></li>
<li>可能程序中使⽤switch语句进⾏流程控制，但是只取输⼊前两位达到省事的⽬的，这样是不可取的，就好⽐，别⼈输⼊pw，程序应当提⽰找不到pw命令,而⾮直接调⽤pwd命令。</li>
<li>整个代码只有⼀个类，并在类⾥使⽤内部类，代码<strong>耦合程度⾼</strong>，而且难以阅读。功能存在问题，未经测试就匆忙提交，质量普遍不⾼。</li>
<li><strong>接口没有打注释</strong></li>
<li>请正确认识<strong>交互性</strong>，不要给程序运⾏添加不必要的操作。</li>
<li><strong>不要把⽂件路径写死了</strong></li>
<li>这是⼀个功能简化了的shell，但基本忠于shell，不要乱改原有的命令。</li>
<li><strong>命名随便</strong>，有⽤a,b,c的，还有竟然⽤⾃⼰名字的。</li>
<li>尽量不要使⽤<strong>windows编程</strong></li>
<li>请把的<strong>注释掉的代码删去</strong>，需要保留的说明原因。</li>
</ul>
<p>From:yc<br><em>感觉犯错点很有参考价值</em></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java垃圾回收机制</title>
    <url>/2020/02/20/Java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="Java垃圾回收机制"><a href="#Java垃圾回收机制" class="headerlink" title="Java垃圾回收机制"></a>Java垃圾回收机制</h1><h2 id="垃圾回收的意义"><a href="#垃圾回收的意义" class="headerlink" title="垃圾回收的意义"></a>垃圾回收的意义</h2><p>在C++中，对象所占的内存在程序结束运行之前一直被占用，在明确释放之前不能分配给其它对象；而在Java中，当没有对象引用指向原先分配给某个对象的内存时，该内存便成为垃圾。JVM的一个系统级线程会自动释放该内存块。<br>事实上，除了释放没用的对象，垃圾回收也可以清除内存记录碎片。由于创建对象和垃圾回收器释放丢弃对象所占的内存空间，内存会出现碎片。碎片是分配给对象的内存块之间的空闲内存洞。碎片整理将所占用的堆内存移到堆的一端，JVM将整理出的内存分配给新的对象。</p>
<h3 id="这使Java-虚拟机具有一些优点"><a href="#这使Java-虚拟机具有一些优点" class="headerlink" title="这使Java 虚拟机具有一些优点"></a>这使Java 虚拟机具有一些优点</h3><ul>
<li>首先，它能<strong>使编程效率提高</strong>。在没有垃圾回收机制的时候，可能要花许多时间来解决一个<strong>难懂的存储器问题。</strong></li>
<li>其次是它<strong>保护程序的完整性</strong>（？）， 垃圾回收是Java语言安全性策略的一个重要部份。</li>
</ul>
<h3 id="垃圾回收的一个潜在的缺点是它的开销影响程序性能。"><a href="#垃圾回收的一个潜在的缺点是它的开销影响程序性能。" class="headerlink" title="垃圾回收的一个潜在的缺点是它的开销影响程序性能。"></a>垃圾回收的一个潜在的缺点是它的<strong>开销影响程序性能</strong>。</h3><ul>
<li>Java虚拟机必须追踪运行程序中有用的对象，而且最终释放没用的对象。这一个过程需要<strong>花费处理器的时间。</strong></li>
<li>其次<strong>垃圾回收算法的不完备性</strong>，<em>早先采用的某些垃圾回收算法就不能保证100%收集到所有的废弃内存。</em>随着垃圾回收算法的不断改进以及软硬件运行效率的不断提升，这些问题都可以迎刃而解。</li>
</ul>
<h2 id="垃圾收集的算法分析"><a href="#垃圾收集的算法分析" class="headerlink" title="垃圾收集的算法分析"></a>垃圾收集的算法分析</h2><p>Java语言规范没有明确地说明JVM使用哪种垃圾回收算法，但是任何一种垃圾回收算法一般要做2件基本的事情：<br>**1. 发现无用信息对象</p>
<ol start="2">
<li>回收被无用对象占用的内存空间，使该空间可被程序再次使用。**</li>
</ol>
<blockquote>
<p>大多数垃圾回收算法使用了<strong>根集(root set)</strong>这个概念；所谓根集就是正在执行的Java程序可以访问的引用变量的集合(包括局部变量、参数、类变量)，程序可以使用引用变量访问对象的属性和调用对象的方法。垃圾回收首先需要确定从根开始 <strong>哪些是可达的和哪些是不可达的</strong>，从根集可达的对象都是活动对象，它们不能作为垃圾被回收，这也包括从根集间接可达的对象。而根集通过任意路径不可达的对象符合垃圾收集的条件，应该被回收。</p>
</blockquote>
<h3 id="1-引用计数法-Reference-Counting-Collector"><a href="#1-引用计数法-Reference-Counting-Collector" class="headerlink" title="1. 引用计数法(Reference Counting Collector)"></a>1. 引用计数法(Reference Counting Collector)</h3><p>引用计数法是<strong>唯一没有使用根集的</strong>垃圾回收的算法，该算法使用引用计数器来区分存活对象和不再使用的对象。堆中的每个对象对应一个引用计数器。<em>计数器值就加1；当引用失效时，计数器值就减1；任何时刻计数器都为0的对象就是不再被使用的，垃圾收集器将回收该对象使用的内存。</em><br>引用计数算法实现简单，效率很高，微软的COM技术、ActionScript、Python等都使用了引用计数算法进行内存管理，但是引用计数算法对于对象之间相互循环引用问题难以解决，因此java并没有使用引用计数算法。</p>
<h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><p>基于引用计数器的垃圾收集器运行较<strong>快</strong>，<em>对程序需要不被长时间打断的实时环境比较有利。</em></p>
<h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><p> <strong>无法检测出循环引用</strong>如父对象有一个对子对象的引用，子对象反过来引用父对象。这样，他们的引用计数永远不可能为0. 而且每次加减<strong>非常浪费内存</strong>。</p>
<h3 id="2-tracing算法-Tracing-Collector"><a href="#2-tracing算法-Tracing-Collector" class="headerlink" title="2. tracing算法(Tracing Collector)"></a>2. tracing算法(Tracing Collector)</h3><p>tracing算法是为了解决引用计数法的问题而提出，它使用了根集的概念。基于tracing算法的垃圾收集器从根集开始扫描，识别出哪些对象可达，哪些对象不可达，并用某种方式标记可达对象，例如对每个可达对象设置一个或多个位。在扫描识别过程中，基于tracing算法的垃圾收集也称为标记和清除(mark-and-sweep)垃圾收集器.</p>
<h3 id="3-compacting算法-Compacting-Collector"><a href="#3-compacting算法-Compacting-Collector" class="headerlink" title="3. compacting算法(Compacting Collector)"></a>3. compacting算法(Compacting Collector)</h3><p>为了<strong>解决堆碎片问题</strong>，基于tracing的垃圾回收吸收了<strong>Compacting算法</strong>的思想，在清除的过程中，算法将所有的对象移到堆的一端，堆的另一端就变成了一个相邻的空闲内存区，收集器会对它移动的所有对象的所有引用进行更新，使得这些引用在新的位置能识别原来的对象。在基于Compacting算法的收集器的实现中，一般增加<strong>句柄和句柄表</strong>。</p>
<p>标记-整理算法在标记-清除算法基础上做了改进，标记阶段是相同的标记出所有需要回收的对象，在标记完成之后不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，在移动过程中清理掉可回收的对象，这个过程叫做整理。<br>标记-整理算法相比标记-清除算法的优点是内存<strong>被整理以后不会产生大量不连续内存碎片问题。</strong><br>复制算法在<strong>对象存活率高的情况下</strong>就要执行较多的复制操作，效率将会变低，而在对象存活率高的情况下使用标记-整理算法效率会大大提高。</p>
<h3 id="4-copying（复制）算法-Coping-Collector"><a href="#4-copying（复制）算法-Coping-Collector" class="headerlink" title="4. copying（复制）算法(Coping Collector)"></a>4. copying（复制）算法(Coping Collector)</h3><p>该算法的提出是为了<strong>克服句柄的开销和解决堆碎片的垃圾回收</strong>。它开始时把堆分成一个对象区和多个空闲区，程序从对象区为对象分配空间，当对象满了，基于coping算法的垃圾回收就从根集中扫描活动对象，并将每个活动对象复制到空闲区(使得活动对象所占的内存之间没有空闲间隔)，这样空闲区变成了对象区，原来的对象区变成了空闲区，程序会在新的对象区中分配内存。<br>一种典型的基于coping算法的垃圾回收是stop-and-copy算法，它将堆分成对象区和空闲区域区，在对象区与空闲区域的切换过程中，程序暂停执行。</p>
<p>S0和s1将可用内存按容量分成大小相等的两块，每次只使用其中一块，当这块内存使用完了，就将还存活的对象复制到另一块内存上去，然后把使用过的内存空间一次清理掉。</p>
<h4 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h4><p>这样使得每次都是对其中一块内存进行回收，内存分配时不用考虑内存碎片等复杂情况，只需要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。</p>
<h4 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h4><p>可使用的内存降为原来一半。</p>
<p>复制算法用于在<strong>新生代垃圾回收</strong></p>
<h3 id="5-generation（分代收集）算法-Generational-Collector"><a href="#5-generation（分代收集）算法-Generational-Collector" class="headerlink" title="5. generation（分代收集）算法(Generational Collector)"></a>5. generation（分代收集）算法(Generational Collector)</h3><p>stop-and-copy垃圾收集器的一个缺陷是<strong>收集器必须复制所有的活动对象</strong>，这增加了程序等待时间，这是coping算法低效的原因。在程序设计中有这样的规律：多数对象存在的时间比较短，少数的存在时间比较长。因此，generation算法将堆分成两个或多个，每个子堆作为对象的一代(generation)。由于多数对象存在的时间比较短，随着程序丢弃不使用的对象，垃圾收集器将从最年轻的子堆中收集这些对象。在分代式的垃圾收集器运行后，上次运行存活下来的对象移到下一最高代的子堆中，由于老一代的子堆不会经常被回收，因而节省了时间。</p>
<p>根据内存中对象的存活周期不同，将内存划分为几块，java的虚拟机中一般把内存划分为新生代和年老代，当新创建对象时一般在新生代中分配内存空间，当新生代垃圾收集器回收几次之后仍然存活的对象会被移动到年老代内存中，当大对象在新生代中无法找到足够的连续内存时也直接在年老代中创建。<br>对于新生代和老年代来说,新生代回收频率很高,但是每次回收耗时很短,而老年代回收频率较低,但是耗时会相对较长,所以应该尽量减少老年代的GC.</p>
<h3 id="6-adaptive算法-Adaptive-Collector"><a href="#6-adaptive算法-Adaptive-Collector" class="headerlink" title="6. adaptive算法(Adaptive Collector)"></a>6. adaptive算法(Adaptive Collector)</h3><p>　　在特定的情况下，一些垃圾收集算法会优于其它算法。基于Adaptive算法的垃圾收集器就是监控当前堆的使用情况，并将选择适当算法的垃圾收集器。</p>
<h2 id="System-gc-方法"><a href="#System-gc-方法" class="headerlink" title="System.gc()方法"></a>System.gc()方法</h2><p>使用System.gc()可以不管JVM使用的是哪一种垃圾回收的算法，都可以请求Java的垃圾回收。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestGC</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">　　    <span class="keyword">new</span> TestGC();</span><br><span class="line">　　    System.gc();</span><br><span class="line">　　    System.runFinalization();</span><br><span class="line">　　 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>tips:调用System.gc()也仅仅是一个<strong>请求(建议)</strong>。JVM接受这个消息后，并不是立即做垃圾回收，而只是对几个垃圾回收算法做了加权，使垃圾回收操作容易发生，或提早发生，或回收较多而已。</p>
<h2 id="finalize-方法"><a href="#finalize-方法" class="headerlink" title="finalize()方法"></a>finalize()方法</h2><p>之所以要使用finalize()，是存在着<strong>垃圾回收器不能处理的特殊情况</strong>。假定你的对象（并非使用new方法）获得了一块“特殊”的内存区域，由于垃圾回收器只知道那些显示地经由new分配的内存空间，所以它不知道该如何释放这块“特殊”的内存区域，那么这个时候java允许在类中定义一个由finalize()方法。</p>
<p>特殊的区域如：</p>
<ol>
<li>由于在分配内存的时候可能采用了类似 C语言的做法，而非JAVA的通常new做法。这种情况主要发生在native method中，比如native method调用了C/C++方法malloc()函数系列来分配存储空间，但是除非调用free()函数，否则这些内存空间将不会得到释放，那么这个时候就可能造成内存泄漏。但是由于free()方法是在C/C++中的函数，所以finalize()中可以用本地方法来调用它。以释放这些“特殊”的内存空间。</li>
<li>又或者打开的<strong>文件资源</strong>，这些资源不属于垃圾回收器的回收范围。</li>
</ol>
<h2 id="触发主GC（Garbage-Collector）的条件"><a href="#触发主GC（Garbage-Collector）的条件" class="headerlink" title="触发主GC（Garbage Collector）的条件"></a>触发主GC（Garbage Collector）的条件</h2><p>JVM进行次GC的频率很高,但因为这种GC占用时间极短,所以对系统产生的影响不大。<br>总的来说,有两个条件会触发主GC:</p>
<ol>
<li>当<strong>没有应用线程在运行时</strong>,GC会被调用。因为<strong>GC在优先级最低的线程中进行</strong>,所以当应用忙时,GC线程就不会被调用,但以下条件除外。</li>
<li><strong>Java堆内存不足时</strong>,GC会被调用。当应用线程在运行,并在运行过程中创建新对象,若这时内存空间不足,JVM就会强制地调用GC线程,以便回收内存用于新的分配。若GC一次之后仍不能满足内存分配的要求,<strong>JVM会再进行两次GC</strong>作进一步的尝试,若仍无法满足要求,则 JVM将报“out of memory”的错误,Java应用将停止。</li>
</ol>
<h2 id="减少GC开销的措施"><a href="#减少GC开销的措施" class="headerlink" title="减少GC开销的措施"></a>减少GC开销的措施</h2><h3 id="1-不要显式调用System-gc"><a href="#1-不要显式调用System-gc" class="headerlink" title="1. 不要显式调用System.gc()"></a>1. 不要显式调用System.gc()</h3><p> 此函数建议JVM进行主GC,虽然只是建议而非一定,但很多情况下它会触发主GC,从而增加主GC的频率,也即增加了间歇性停顿的次数。</p>
<h3 id="2-尽量减少临时对象的使用"><a href="#2-尽量减少临时对象的使用" class="headerlink" title="2. 尽量减少临时对象的使用"></a>2. 尽量减少临时对象的使用</h3><p> 临时对象在跳出函数调用后,会成为垃圾,少用临时变量就相当于减少了垃圾的产生,从而延长了出现上述第二个触发条件出现的时间,减少了主GC的机会。</p>
<h3 id="3-对象不用时最好显式置为Null"><a href="#3-对象不用时最好显式置为Null" class="headerlink" title="3. 对象不用时最好显式置为Null"></a>3. 对象不用时最好显式置为Null</h3><p> 为Null的对象都会被作为垃圾处理,所以将不用的对象显式地设为Null,有利于GC收集器判定垃圾,从而提高了GC的效率。</p>
<h3 id="4-尽量使用StringBuffer-而不用String来累加字符串"><a href="#4-尽量使用StringBuffer-而不用String来累加字符串" class="headerlink" title="4. 尽量使用StringBuffer,而不用String来累加字符串"></a>4. 尽量使用StringBuffer,而不用String来累加字符串</h3><p>  由于String是固定长的字符串对象,累加String对象时,并非在一个String对象中扩增,而是重新创建新的String对象,如Str5=Str1+Str2+Str3+Str4,这条语句执行过程中会产生多个垃圾对象,因为对次作“+”操作时都必须创建新的String对象,但这些过渡对象对系统来说是没有实际意义的,只会增加更多的垃圾。避免这种情况可以改用StringBuffer来累加字符串,因StringBuffer是可变长的,它在原有基础上进行扩增,不会产生中间对象。</p>
<h3 id="5-能用基本类型如Int-Long-就不用Integer-Long对象"><a href="#5-能用基本类型如Int-Long-就不用Integer-Long对象" class="headerlink" title="5.  能用基本类型如Int,Long,就不用Integer,Long对象"></a>5.  能用基本类型如Int,Long,就不用Integer,Long对象</h3><p>基本类型变量占用的内存资源比相应对象占用的少得多,如果没有必要,最好使用基本变量。</p>
<h3 id="6-尽量少用静态对象变量"><a href="#6-尽量少用静态对象变量" class="headerlink" title="6. 尽量少用静态对象变量"></a>6. 尽量少用静态对象变量</h3><p>静态变量属于全局变量,不会被GC回收,它们会一直占用内存。</p>
<h3 id="7-分散对象创建或删除的时间"><a href="#7-分散对象创建或删除的时间" class="headerlink" title="7. 分散对象创建或删除的时间"></a>7. 分散对象创建或删除的时间</h3><p>集中在短时间内大量创建新对象,特别是大对象,会导致突然需要大量内存,JVM在面临这种情况时,只能进行主GC,以回收内存或整合内存碎片,从而增加主GC的频率。集中删除对象,道理也是一样的。它使得突然出现了大量的垃圾对象,空闲空间必然减少,从而大大增加了下一次创建新对象时强制主GC的机会。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chair</span> </span>&#123;</span><br><span class="line">　　<span class="keyword">static</span> <span class="keyword">boolean</span> gcrun = <span class="keyword">false</span>;</span><br><span class="line">　　<span class="keyword">static</span> <span class="keyword">boolean</span> f = <span class="keyword">false</span>;</span><br><span class="line">　　<span class="keyword">static</span> <span class="keyword">int</span> created = <span class="number">0</span>;</span><br><span class="line">　　<span class="keyword">static</span> <span class="keyword">int</span> finalized = <span class="number">0</span>;</span><br><span class="line">　　<span class="keyword">int</span> i;</span><br><span class="line">　　Chair() &#123;</span><br><span class="line">　　    i = ++created;</span><br><span class="line">　　    <span class="keyword">if</span>(created == <span class="number">47</span>)</span><br><span class="line">　　　      System.out.println(<span class="string">"Created 47"</span>);</span><br><span class="line">　　&#125;</span><br><span class="line">　　<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">　　    <span class="keyword">if</span>(!gcrun) &#123;</span><br><span class="line">　　　      gcrun = <span class="keyword">true</span>;</span><br><span class="line">　　　      System.out.println(<span class="string">"Beginning to finalize after "</span> + created + <span class="string">" Chairs have been created"</span>);</span><br><span class="line">　　    &#125;</span><br><span class="line">　　    <span class="keyword">if</span>(i == <span class="number">47</span>) &#123;</span><br><span class="line">　　　      System.out.println(<span class="string">"Finalizing Chair #47， "</span> +<span class="string">"Setting flag to stop Chair creation"</span>);</span><br><span class="line">　　　      f = <span class="keyword">true</span>;</span><br><span class="line">　　    &#125;</span><br><span class="line">　　    finalized++;</span><br><span class="line">　　    <span class="keyword">if</span>(finalized &gt;= created)</span><br><span class="line">　　　      System.out.println(<span class="string">"All "</span> + finalized + <span class="string">" finalized"</span>);</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Garbage</span> </span>&#123;</span><br><span class="line">　　<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">　　<span class="keyword">if</span>(args.length == <span class="number">0</span>) &#123;</span><br><span class="line">　　　  System.err.println(<span class="string">"Usage: /n"</span> + <span class="string">"java Garbage before/n or:/n"</span> + <span class="string">"java Garbage after"</span>);</span><br><span class="line">　　　  <span class="keyword">return</span>;</span><br><span class="line">　　&#125;</span><br><span class="line">　　<span class="keyword">while</span>(!Chair.f) &#123;</span><br><span class="line">　　　  <span class="keyword">new</span> Chair();</span><br><span class="line">　　　  <span class="keyword">new</span> String(<span class="string">"To take up space"</span>);</span><br><span class="line">　　&#125;</span><br><span class="line">　　System.out.println(<span class="string">"After all Chairs have been created:/n"</span> + <span class="string">"total created = "</span> + Chair.created +</span><br><span class="line">　　<span class="string">"， total finalized = "</span> + Chair.finalized);</span><br><span class="line">　　<span class="keyword">if</span>(args[<span class="number">0</span>].equals(<span class="string">"before"</span>)) &#123;</span><br><span class="line">　　　　System.out.println(<span class="string">"gc():"</span>);</span><br><span class="line">　　　　System.gc();</span><br><span class="line">　　　　System.out.println(<span class="string">"runFinalization():"</span>);</span><br><span class="line">　　　　System.runFinalization();</span><br><span class="line">　　&#125;</span><br><span class="line">　　System.out.println(<span class="string">"bye!"</span>);</span><br><span class="line">　　<span class="keyword">if</span>(args[<span class="number">0</span>].equals(<span class="string">"after"</span>))</span><br><span class="line">　　　  System.runFinalizersOnExit(<span class="keyword">true</span>);</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面这个程序创建了许多Chair对象，而且在垃圾收集器开始运行后的某些时候，程序会停止创建Chair。由于垃圾收集器可能在任何时间运行，所以我们不能准确知道它在何时启动。因此，程序用一个名为gcrun的标记来指出垃圾收集器是否已经开始运行。利用第二个标记f，Chair可告诉main()它应停止对象的生成。这两个标记都是在finalize()内部设置的，它调用于垃圾收集期间。另两个static变量–created以及 finalized–分别用于跟踪已创建的对象数量以及垃圾收集器已进行完收尾工作的对象数量。最后，每个Chair都有它自己的（非 static）int i，所以能跟踪了解它具体的编号是多少。编号为47的Chair进行完收尾工作后，标记会设为true，最终结束Chair对象的创建过程。</p>
</blockquote>
<h2 id="关于垃圾回收的几点补充"><a href="#关于垃圾回收的几点补充" class="headerlink" title="关于垃圾回收的几点补充"></a>关于垃圾回收的几点补充</h2><ul>
<li>垃圾收集发生的<strong>不可预知性</strong>：由于实现了不同的垃圾回收算法和采用了不同的收集机制，所以它有可能是定时发生，有可能是当出现系统空闲CPU资源时发生，也有可能是和原始的垃圾收集一样，等到内存消耗出现极限时发生，这与垃圾收集器的选择和具体的设置都有关系。</li>
<li>垃圾收集的实现和<strong>具体的JVM 以及JVM的内存模型</strong>有非常紧密的关系。不同的JVM 可能采用不同的垃圾收集，而<strong>JVM 的内存模型决定着该JVM可以采用哪些类型垃圾收集</strong>。现在，<strong>HotSpot 系列</strong>JVM中的内存系统都采用先进的面向对象的框架设计，这使得该系列JVM都可以采用最先进的垃圾收集。</li>
<li><strong>尽早释放无用对象的引用。</strong>大多数程序员在使用临时变量的时候，都是让引用变量在退出活动域(scope)后，自动设置为null，暗示垃圾收集器来收集该对象，还必须注意该引用的<strong>对象是否被监听</strong>，如果有，则要<strong>去掉监听器，然后再赋空值</strong>。</li>
<li>关键的也是难把握的问题是<strong>内存泄漏</strong>。良好的编程习惯和严谨的编程态度永远是最重要的，不要让自己的一个小错误导致内存出现大漏洞。</li>
</ul>
<p>博客参考：<br><a href="https://blog.csdn.net/zsuguangh/article/details/6429592" target="_blank" rel="noopener">https://blog.csdn.net/zsuguangh/article/details/6429592</a><br><a href="https://blog.csdn.net/zhangcongyi420/article/details/89060970" target="_blank" rel="noopener">https://blog.csdn.net/zhangcongyi420/article/details/89060970</a></p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Kmeans聚类入门</title>
    <url>/2020/02/16/Kmeans%E8%81%9A%E7%B1%BB%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>Kmeans聚类入门</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line">data = np.random.rand(<span class="number">100</span>, <span class="number">3</span>) <span class="comment">#生成一个随机数据，样本大小为100, 特征数为3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#假如我要构造一个聚类数为3的聚类器</span></span><br><span class="line">estimator = KMeans(n_clusters=<span class="number">3</span>)<span class="comment">#构造聚类器</span></span><br><span class="line">estimator.fit(data)<span class="comment">#聚类</span></span><br><span class="line">label_pred = estimator.labels_ <span class="comment">#获取聚类标签</span></span><br><span class="line">centroids = estimator.cluster_centers_ <span class="comment">#获取聚类中心</span></span><br><span class="line">inertia = estimator.inertia_ <span class="comment"># 获取聚类准则的总和</span></span><br><span class="line"></span><br><span class="line">print(label_pred)</span><br><span class="line">print(centroids)</span><br><span class="line">print(inertia)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当数据量很大的时候，Kmeans 显然还是很弱的，会比较耗费内存速度也会收到很大影响。scikit-learn 提供了MiniBatchKMeans算法，大致思想就是对数据进行抽样，每次不使用所有的数据来计算，这就会导致准确率的损失。</p>
</blockquote>
<p>做了实验后，文本聚类效果不是很好（直接使用可视化），原因：数据太少了。</p>
]]></content>
  </entry>
  <entry>
    <title>MySQL安装踩坑手记</title>
    <url>/2020/02/03/MySQL%E8%B8%A9%E5%9D%91%E6%89%8B%E8%AE%B0/</url>
    <content><![CDATA[<p>傻瓜式的安装（Windows下）我都能弄得一团糟！还是勉励一句，踩坑就是要越挫越勇的。<br>倒叙[^1]<br>[^1]:倒叙入口</p>
<ol>
<li>配置初始化的my.ini文件（在安装根目录下添加 my.ini）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># 设置3306端口</span><br><span class="line">port=3306</span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir=D:\\Downloads\\mysql-8.0.19-winx64\\mysql-8.0.19-winx64   # 切记此处一定要用双斜杠\\，单斜杠我这里会出错，不过看别人的教程，有的是单斜杠。自己尝试吧</span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line">datadir=D:\\Downloads\\mysql-8.0.19-winx64\\mysql-8.0.19-winx64\\data   # 此处同上</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections=200</span><br><span class="line"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span><br><span class="line">max_connect_errors=10</span><br><span class="line"># 服务端使用的字符集默认为UTF8</span><br><span class="line">character-set-server=utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line"># 默认使用“mysql_native_password”插件认证</span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br><span class="line">[mysql]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[client]</span><br><span class="line"># 设置mysql客户端连接服务端时默认使用的端口</span><br><span class="line">port=3306</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>我的胡来操作，不按照正常的顺序</p>
<ol start="2">
<li>在MySQL安装目录的 bin 目录下执行命令：<blockquote>
<p>mysql -u root -p</p>
</blockquote>
</li>
</ol>
<h4 id="报错1"><a href="#报错1" class="headerlink" title="报错1:"></a>报错1:</h4><ul>
<li>无法启动此程序，因为计算机丢失VCRUNTIME140_1.dll。尝试重新安装该程序以解决此问题</li>
</ul>
<p>图片</p>
<p>bing之后发现很可能是昨天在尝试将一些无良广告页面弹出的文件删除的过程中，不小心将一个重要的文件删除掉了，而且还把回收站彻底清空了。于是开始想方设法安装……</p>
<h4 id="报错2："><a href="#报错2：" class="headerlink" title="报错2："></a>报错2：</h4><ul>
<li>Visual C++ Redistributable for Visual Studio 2015 下载失败,日志文件中的报错是e000: Error 0x80070666: Cannot install a product when a newer version is installed.</li>
</ul>
<p>bing说要新版本，还有2017和2019的，我下载了2019的成功了。</p>
<blockquote>
<p><a href="https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads" target="_blank" rel="noopener">https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads</a></p>
</blockquote>
<p>重新尝试</p>
<blockquote>
<p>mysql -u root -p</p>
</blockquote>
<h4 id="报错3："><a href="#报错3：" class="headerlink" title="报错3："></a>报错3：</h4><ul>
<li>ERROR 2003 (HY000): Can’t connect to MySQL server on ‘localhost’ (10061)</li>
</ul>
<p>解决步骤 如网址<a href="https://jingyan.baidu.com/article/a681b0de5ac1dc3b1943467d.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/a681b0de5ac1dc3b1943467d.html</a><br>关键步骤有<br>打开 <strong>计算机管理</strong>中的<strong>服务</strong>查看MySQL </p>
<ol>
<li>是否安装 N —— 手动 mysql -install</li>
<li>安装后点开后<strong>启动</strong>运行</li>
</ol>
<h4 id="报错4："><a href="#报错4：" class="headerlink" title="报错4："></a>报错4：</h4><ul>
<li>MySQL服务无法启动,服务中点启动报错，还可以在终端中输入<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>怎么解决MySQL没法启动的问题?<br><a href="https://jingyan.baidu.com/article/b24f6c820a029b86bfe5da3c.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/b24f6c820a029b86bfe5da3c.html</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">关键步骤：</span><br><span class="line">将my.ini移至bin目录下。</span><br><span class="line">mysqld --initialize --user=mysql --console记录临时密码</span><br><span class="line">再到服务中启动MySQL成功</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>改密码：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqladmin -u USER -p password PASSWORD</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="报错5："><a href="#报错5：" class="headerlink" title="报错5："></a>报错5：</h4><ul>
<li><p>mysqladmin: connect to server at ‘localhost’ failed<br>error: ‘Access denied for user ‘root’@’localhost</p>
<p>进入MySQL去修改密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;新密码&apos;;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>终于可以算是大功告成了！撒花完结</p>
<p>倒叙入口</p>
<blockquote>
<p>一开始是准备跟着b站的视频教程安装的（相比各式各样（鱼龙混杂）的博客来说，可行性更强），但是在安装MySQL installer的时候，不小心乱键入，七七八八错了章法。<br>于是想删掉胡乱的设定，重新安装。不幸的是，我把原有的全部情空了，除了Connector/NET怎么也删除不了。<br>之后删了MySQL这个文件，重返官网下载，但是发现已经不会再给初始化设定了，我也只剩Connector/NET。于是念叨着找老版本是不是就可以重新有初始化设定，由于网速的原因，花了五六个小时下载旧版本却发现还是Connector/NET。<br>没有办法了，于是想办法把原有的各种功能加回来，但是发现怎么Add也行不。非常沮丧，觉得Windows下的MySQL是安装不成功的了。<br>暂时放下MySQL Installer，转而翻看博客来找办法。进官网下载了普通的MySQL文件，按照步骤进行 ————</p>
</blockquote>
<p>按照这篇博客上面的顺序会比较完整<br><a href="https://blog.csdn.net/qq_43037478/article/details/88976024" target="_blank" rel="noopener">https://blog.csdn.net/qq_43037478/article/details/88976024</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>NLP入门之文本分类</title>
    <url>/2020/02/12/NLP%E5%85%A5%E9%97%A8%E4%B9%8B%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> LabelEncoder</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> CountVectorizer</span><br><span class="line">warnings.filterwarnings(<span class="string">'ignore'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xlrd <span class="comment"># 也可以使用pandas处理excel，非常好用</span></span><br><span class="line">workbook = xlrd.open_workbook(<span class="string">r'F:\C_1\train\train.xlsx'</span>)</span><br><span class="line">sheet = workbook.sheet_by_index(<span class="number">0</span>) <span class="comment"># sheet索引从0开始</span></span><br><span class="line">cols_1 = sheet.col_values(<span class="number">4</span>) <span class="comment"># 获取第3列内容</span></span><br><span class="line">cols_2 = sheet.col_values(<span class="number">5</span>)</span><br><span class="line">X_train = cols_1</span><br><span class="line">y_train = cols_2</span><br><span class="line"></span><br><span class="line">workbook1 = xlrd.open_workbook(<span class="string">r'F:\C_1\test\test.xlsx'</span>)</span><br><span class="line">sheet = workbook1.sheet_by_index(<span class="number">0</span>)</span><br><span class="line">cols_3 = sheet.col_values(<span class="number">4</span>)</span><br><span class="line">cols_4 = sheet.col_values(<span class="number">5</span>)</span><br><span class="line">X_test = cols_3</span><br><span class="line">y_test = cols_4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去掉空格</span></span><br><span class="line">X_train_word = [jieba.cut(words) <span class="keyword">for</span> words <span class="keyword">in</span> X_train]</span><br><span class="line">X_train_cut = [<span class="string">' '</span>.join(word) <span class="keyword">for</span> word <span class="keyword">in</span> X_train_word]</span><br><span class="line">X_test_word = [jieba.cut(words) <span class="keyword">for</span> words <span class="keyword">in</span> X_test]</span><br><span class="line">X_test_cut  = [<span class="string">' '</span>.join(word) <span class="keyword">for</span> word <span class="keyword">in</span> X_test_word]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 停止词使用</span></span><br><span class="line">stoplist = [word.strip() <span class="keyword">for</span> word <span class="keyword">in</span> open(<span class="string">'F:\MLstudy\stop\stopword.txt'</span>, \</span><br><span class="line">                                           encoding=<span class="string">'utf-8'</span>).readlines()]</span><br><span class="line"><span class="comment"># from sklearn.preprocessing import LabelEncoder</span></span><br><span class="line">le = LabelEncoder()</span><br><span class="line">y_train_le = le.fit_transform(y_train)</span><br><span class="line">y_test_le  = le.fit_transform(y_test)</span><br><span class="line"></span><br><span class="line"><span class="comment">#文本数据转换成数据值数据矩阵</span></span><br><span class="line"><span class="comment"># from sklearn.feature_extraction.text import CountVectorizer</span></span><br><span class="line">count = CountVectorizer(stop_words=stoplist)</span><br><span class="line"></span><br><span class="line">count.fit(list(X_train_cut) + list(X_test_cut))</span><br><span class="line">X_train_count = count.transform(X_train_cut)</span><br><span class="line">X_test_count  = count.transform(X_test_cut)</span><br><span class="line"></span><br><span class="line">X_train_count = X_train_count.toarray()</span><br><span class="line">X_test_count  = X_test_count.toarray()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于存储所有算法的名字，准确率和所消耗的时间</span></span><br><span class="line">estimator_list, score_list, time_list = [], [], []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_text_classification</span><span class="params">(estimator, X, y, X_test, y_test)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    estimator: 分类器，必选参数</span></span><br><span class="line"><span class="string">            X: 特征训练数据，必选参数</span></span><br><span class="line"><span class="string">            y: 标签训练数据，必选参数</span></span><br><span class="line"><span class="string">       X_test: 特征测试数据，必选参数</span></span><br><span class="line"><span class="string">        y_tes: 标签测试数据，必选参数</span></span><br><span class="line"><span class="string">       return: 返回值</span></span><br><span class="line"><span class="string">           y_pred_model: 预测值</span></span><br><span class="line"><span class="string">             classifier: 分类器名字</span></span><br><span class="line"><span class="string">                  score: 准确率</span></span><br><span class="line"><span class="string">                      t: 消耗的时间</span></span><br><span class="line"><span class="string">                  matrix: 混淆矩阵</span></span><br><span class="line"><span class="string">                  report: 分类评价函数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    start = time.time()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n&gt;&gt;&gt;算法正在启动，请稍候...'</span>)</span><br><span class="line">    model = estimator</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n&gt;&gt;&gt;算法正在进行训练，请稍候...'</span>)</span><br><span class="line">    model.fit(X, y)</span><br><span class="line">    print(model)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n&gt;&gt;&gt;算法正在进行预测，请稍候...'</span>)</span><br><span class="line">    y_pred_model = model.predict(X_test)</span><br><span class="line">    print(y_pred_model)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n&gt;&gt;&gt;算法正在进行性能评估，请稍候...'</span>)</span><br><span class="line">    score = metrics.accuracy_score(y_test, y_pred_model)</span><br><span class="line">    matrix = metrics.confusion_matrix(y_test, y_pred_model)</span><br><span class="line">    report = metrics.classification_report(y_test, y_pred_model)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#     f1 = metrics.f1_score(y_test, y_pred_model,average='weighted') #这是加权的</span></span><br><span class="line">    f1 = metrics.f1_score(y_test, y_pred_model, average=<span class="string">'macro'</span>)</span><br><span class="line">    print(<span class="string">'&gt;&gt;&gt;准确率\n'</span>, score)</span><br><span class="line">    print(<span class="string">'\n&gt;&gt;&gt;混淆矩阵\n'</span>, matrix)</span><br><span class="line">    print(<span class="string">'\n&gt;&gt;&gt;召回率\n'</span>, report)</span><br><span class="line">    print(<span class="string">'\n&gt;&gt;&gt;F1 score\n'</span>, f1)</span><br><span class="line">    print(<span class="string">'&gt;&gt;&gt;算法程序已经结束...'</span>)</span><br><span class="line"></span><br><span class="line">    end = time.time()</span><br><span class="line">    t = end - start</span><br><span class="line">    print(<span class="string">'\n&gt;&gt;&gt;算法消耗时间为：'</span>, t, <span class="string">'秒\n'</span>)</span><br><span class="line">    classifier = str(model).split(<span class="string">'('</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> y_pred_model, classifier, score, round(t, <span class="number">2</span>), matrix, report</span><br></pre></td></tr></table></figure>

<h2 id="方法1——k-近邻算法"><a href="#方法1——k-近邻算法" class="headerlink" title="方法1——k 近邻算法"></a>方法1——k 近邻算法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"></span><br><span class="line">knc = KNeighborsClassifier()</span><br><span class="line">result = get_text_classification(knc, X_train_count, y_train_le, X_test_count, y_test_le)</span><br><span class="line">estimator_list.append(result[<span class="number">1</span>]), score_list.append(result[<span class="number">2</span>]), time_list.append(result[<span class="number">3</span>])</span><br></pre></td></tr></table></figure>

<h2 id="方法2——决策树"><a href="#方法2——决策树" class="headerlink" title="方法2——决策树"></a>方法2——决策树</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"></span><br><span class="line">dtc = DecisionTreeClassifier()</span><br><span class="line">result = get_text_classification(dtc, X_train_count, y_train_le, X_test_count, y_test_le)</span><br><span class="line">estimator_list.append(result[<span class="number">1</span>]), score_list.append(result[<span class="number">2</span>]), time_list.append(result[<span class="number">3</span>])</span><br></pre></td></tr></table></figure>

<h2 id="方法3——多层感知器"><a href="#方法3——多层感知器" class="headerlink" title="方法3——多层感知器"></a>方法3——多层感知器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neural_network <span class="keyword">import</span> MLPClassifier</span><br><span class="line"></span><br><span class="line">mlpc = MLPClassifier()</span><br><span class="line">result = get_text_classification(mlpc, X_train_count, y_train_le, X_test_count, y_test_le)</span><br><span class="line">estimator_list.append(result[<span class="number">1</span>]), score_list.append(result[<span class="number">2</span>]), time_list.append(result[<span class="number">3</span>])</span><br></pre></td></tr></table></figure>

<h2 id="方法4——伯努力贝叶斯算法"><a href="#方法4——伯努力贝叶斯算法" class="headerlink" title="方法4——伯努力贝叶斯算法"></a>方法4——伯努力贝叶斯算法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> BernoulliNB</span><br><span class="line"></span><br><span class="line">bnb = BernoulliNB()</span><br><span class="line">result = get_text_classification(bnb, X_train_count, y_train_le, X_test_count, y_test_le)</span><br><span class="line">estimator_list.append(result[<span class="number">1</span>]), score_list.append(result[<span class="number">2</span>]), time_list.append(result[<span class="number">3</span>])</span><br></pre></td></tr></table></figure>

<h2 id="方法5——高斯贝叶斯"><a href="#方法5——高斯贝叶斯" class="headerlink" title="方法5——高斯贝叶斯"></a>方法5——高斯贝叶斯</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> GaussianNB</span><br><span class="line"></span><br><span class="line">gnb = GaussianNB()</span><br><span class="line">result = get_text_classification(gnb, X_train_count, y_train_le, X_test_count, y_test_le)</span><br><span class="line">estimator_list.append(result[<span class="number">1</span>]), score_list.append(result[<span class="number">2</span>]), time_list.append(result[<span class="number">3</span>])</span><br></pre></td></tr></table></figure>

<h2 id="方法6——多项式朴素贝叶斯"><a href="#方法6——多项式朴素贝叶斯" class="headerlink" title="方法6——多项式朴素贝叶斯"></a>方法6——多项式朴素贝叶斯</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> MultinomialNB</span><br><span class="line"></span><br><span class="line">mnb = MultinomialNB()</span><br><span class="line">result = get_text_classification(mnb, X_train_count, y_train_le, X_test_count, y_test_le)</span><br><span class="line">estimator_list.append(result[<span class="number">1</span>]), score_list.append(result[<span class="number">2</span>]), time_list.append(result[<span class="number">3</span>])</span><br></pre></td></tr></table></figure>

<h2 id="方法7——逻辑回归算法"><a href="#方法7——逻辑回归算法" class="headerlink" title="方法7——逻辑回归算法"></a>方法7——逻辑回归算法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"></span><br><span class="line">lgr = LogisticRegression()</span><br><span class="line">result = get_text_classification(lgr, X_train_count, y_train_le, X_test_count, y_test_le)</span><br><span class="line">estimator_list.append(result[<span class="number">1</span>]), score_list.append(result[<span class="number">2</span>]), time_list.append(result[<span class="number">3</span>])</span><br></pre></td></tr></table></figure>

<h2 id="方法8——支持向量机算法"><a href="#方法8——支持向量机算法" class="headerlink" title="方法8——支持向量机算法"></a>方法8——支持向量机算法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"></span><br><span class="line">svc = svm.SVC()</span><br><span class="line">result = get_text_classification(svc, X_train_count, y_train_le, X_test_count, y_test_le)</span><br><span class="line">estimator_list.append(result[<span class="number">1</span>]), score_list.append(result[<span class="number">2</span>]), time_list.append(result[<span class="number">3</span>])</span><br></pre></td></tr></table></figure>

<h2 id="集成学习算法——方法1——随机森林算法"><a href="#集成学习算法——方法1——随机森林算法" class="headerlink" title="集成学习算法——方法1——随机森林算法"></a>集成学习算法——方法1——随机森林算法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"></span><br><span class="line">rfc = RandomForestClassifier()</span><br><span class="line">result = get_text_classification(rfc, X_train_count, y_train_le, X_test_count, y_test_le)</span><br><span class="line">estimator_list.append(result[<span class="number">1</span>]), score_list.append(result[<span class="number">2</span>]), time_list.append(result[<span class="number">3</span>])</span><br></pre></td></tr></table></figure>

<h2 id="集成学习算法——方法2——自增强算法"><a href="#集成学习算法——方法2——自增强算法" class="headerlink" title="集成学习算法——方法2——自增强算法"></a>集成学习算法——方法2——自增强算法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> AdaBoostClassifier</span><br><span class="line"></span><br><span class="line">abc = AdaBoostClassifier()</span><br><span class="line">result = get_text_classification(abc, X_train_count, y_train_le, X_test_count, y_test_le)</span><br><span class="line">estimator_list.append(result[<span class="number">1</span>]), score_list.append(result[<span class="number">2</span>]), time_list.append(result[<span class="number">3</span>])</span><br></pre></td></tr></table></figure>

<h2 id="集成学习算法——方法3——lightgbm算法"><a href="#集成学习算法——方法3——lightgbm算法" class="headerlink" title="集成学习算法——方法3——lightgbm算法"></a>集成学习算法——方法3——lightgbm算法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lightgbm</span><br><span class="line"></span><br><span class="line">gbm = lightgbm.LGBMClassifier()</span><br><span class="line">result = get_text_classification(gbm, X_train_count, y_train_le, X_test_count, y_test_le)</span><br><span class="line">estimator_list.append(result[<span class="number">1</span>]), score_list.append(result[<span class="number">2</span>]), time_list.append(result[<span class="number">3</span>])</span><br></pre></td></tr></table></figure>

<h2 id="集成学习算法——方法4——xgboost算法"><a href="#集成学习算法——方法4——xgboost算法" class="headerlink" title="集成学习算法——方法4——xgboost算法"></a>集成学习算法——方法4——xgboost算法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xgboost</span><br><span class="line"></span><br><span class="line">xgb = xgboost.XGBClassifier()</span><br><span class="line">result = get_text_classification(xgb, X_train_count, y_train_le, X_test_count, y_test_le)</span><br><span class="line">estimator_list.append(result[<span class="number">1</span>]), score_list.append(result[<span class="number">2</span>]), time_list.append(result[<span class="number">3</span>])</span><br></pre></td></tr></table></figure>

<h2 id="深度学习算法——方法1——多分类前馈神经网络"><a href="#深度学习算法——方法1——多分类前馈神经网络" class="headerlink" title="深度学习算法——方法1——多分类前馈神经网络"></a>深度学习算法——方法1——多分类前馈神经网络</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> layers</span><br><span class="line"><span class="keyword">from</span> keras.utils.np_utils <span class="keyword">import</span> to_categorical</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="comment"># --------------------------------</span></span><br><span class="line"><span class="comment"># np.random.seed(0)     # 设置随机数种子</span></span><br><span class="line">feature_num = X_train_count.shape[<span class="number">1</span>]     <span class="comment"># 设置所希望的特征数量</span></span><br><span class="line"><span class="comment"># print(feature_num)</span></span><br><span class="line"><span class="comment"># ---------------------------------</span></span><br><span class="line"><span class="comment"># 独热编码目标向量来创建目标矩阵</span></span><br><span class="line">y_train_cate = to_categorical(y_train_le)</span><br><span class="line">y_test_cate = to_categorical(y_test_le)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------------------------------</span></span><br><span class="line"><span class="comment"># 1 创建神经网络</span></span><br><span class="line">network = models.Sequential() </span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------------------------------</span></span><br><span class="line"><span class="comment"># 2 添加神经连接层</span></span><br><span class="line"><span class="comment"># 第一层必须有并且一定是 [输入层], 必选</span></span><br><span class="line">network.add(layers.Dense(     <span class="comment"># 添加带有 relu 激活函数的全连接层</span></span><br><span class="line">                         units=<span class="number">128</span>, </span><br><span class="line">                         activation=<span class="string">'relu'</span>, </span><br><span class="line">                         input_shape=(feature_num, )</span><br><span class="line">                         ))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 介于第一层和最后一层之间的称为 [隐藏层]，可选</span></span><br><span class="line">network.add(layers.Dense(     <span class="comment"># 添加带有 relu 激活函数的全连接层</span></span><br><span class="line">                         units=<span class="number">128</span>, </span><br><span class="line">                         activation=<span class="string">'relu'</span></span><br><span class="line">                         ))</span><br><span class="line">network.add(layers.Dropout(<span class="number">0.8</span>))</span><br><span class="line"><span class="comment"># network.add(layers.Dropout(0.4))</span></span><br><span class="line"><span class="comment"># 最后一层必须有并且一定是 [输出层], 必选                         </span></span><br><span class="line">network.add(layers.Dense(     <span class="comment"># 添加带有 softmax 激活函数的全连接层</span></span><br><span class="line">                         units=<span class="number">8</span>,</span><br><span class="line">                         activation=<span class="string">'sigmoid'</span></span><br><span class="line">                         ))</span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------------------------------------------</span></span><br><span class="line"><span class="comment"># 3 编译神经网络</span></span><br><span class="line">network.compile(loss=<span class="string">'categorical_crossentropy'</span>,  <span class="comment"># 分类交叉熵损失函数    </span></span><br><span class="line">                optimizer=<span class="string">'rmsprop'</span>,  </span><br><span class="line">                metrics=[<span class="string">'accuracy'</span>]              <span class="comment"># 准确率度量</span></span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------------------------------------------</span></span><br><span class="line"><span class="comment"># 4 开始训练神经网络</span></span><br><span class="line">history = network.fit(X_train_count,     <span class="comment"># 训练集特征</span></span><br><span class="line">            y_train_cate,        <span class="comment"># 训练集标签</span></span><br><span class="line">            epochs=<span class="number">20</span>,          <span class="comment"># 迭代次数</span></span><br><span class="line">            batch_size=<span class="number">300</span>,    <span class="comment"># 每个批量的观测数  可做优化</span></span><br><span class="line">            validation_data=(X_test_count, y_test_cate)  <span class="comment"># 验证测试集数据</span></span><br><span class="line">            )</span><br><span class="line">network.summary()</span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------------------------------------------</span></span><br><span class="line"><span class="comment"># 6 性能评估</span></span><br><span class="line">print(<span class="string">'&gt;&gt;&gt;多分类前馈神经网络性能评估如下...\n'</span>)</span><br><span class="line">score = network.evaluate(X_test_count,</span><br><span class="line">                        y_test_cate,</span><br><span class="line">                        batch_size=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\n&gt;&gt;&gt;评分\n'</span>, score)</span><br><span class="line">print()</span><br><span class="line">end = time.time()</span><br><span class="line"></span><br><span class="line">estimator_list.append(<span class="string">'前馈网络'</span>)</span><br><span class="line">score_list.append(score[<span class="number">1</span>])</span><br><span class="line">time_list.append(round(end-start, <span class="number">2</span>))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>NLP</category>
      </categories>
      <tags>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>Python词云</title>
    <url>/2020/02/13/Python%E8%AF%8D%E4%BA%91/</url>
    <content><![CDATA[<p>配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install numpy matplotlib pillow wordcloud imageio jieba snownlp itchat -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<p>用清华的镜像速度好评</p>
<p>网上提供的图片素材太少了，只好用自己一般的画工作图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> wordcloud</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入imageio库中的imread函数，并用这个函数读取本地图片，作为词云形状图片</span></span><br><span class="line"><span class="keyword">import</span> imageio</span><br><span class="line">mk = imageio.imread(<span class="string">"xiaolan.png"</span>)</span><br><span class="line">w = wordcloud.WordCloud(mask=mk)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建并配置词云对象w，注意要加scale参数，提高清晰度</span></span><br><span class="line">w = wordcloud.WordCloud(width=<span class="number">1000</span>,</span><br><span class="line">                        height=<span class="number">700</span>,</span><br><span class="line">                        background_color=<span class="string">'white'</span>,</span><br><span class="line">                        font_path=<span class="string">'simkai.ttf'</span>,</span><br><span class="line">                        mask=mk,</span><br><span class="line">                        scale=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对来自外部文件的文本进行中文分词，得到string  ，有可能会遇到编码问题，这个可以根据报错来</span></span><br><span class="line">f = open(<span class="string">'知乎甜话.txt'</span>)</span><br><span class="line">txt = f.read()</span><br><span class="line">txtlist = jieba.lcut(txt)</span><br><span class="line">string = <span class="string">" "</span>.join(txtlist)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将string变量传入w的generate()方法，给词云输入文字</span></span><br><span class="line">w.generate(string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将词云图片导出到当前文件夹</span></span><br><span class="line">w.to_file(<span class="string">'chao1.png'</span>)</span><br></pre></td></tr></table></figure>

<p>上传不了图片！</p>
<p>TODO：颜色 &amp; 字体</p>
]]></content>
      <categories>
        <category>Pyhton</category>
      </categories>
      <tags>
        <tag>sth.interesting</tag>
      </tags>
  </entry>
  <entry>
    <title>Rec</title>
    <url>/2019/11/27/Rec/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输密码叭~</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="8fb5084f5e4d89181d6f6ab4077b4ea03a6500e7f2477a0497db32e427a99724"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>R语言（DrImpute &amp; VIPER）</title>
    <url>/2020/02/07/R%E8%AF%AD%E8%A8%80%EF%BC%88DrImpute%20&amp;%20VIPER%EF%BC%89/</url>
    <content><![CDATA[<h2 id="VIPER"><a href="#VIPER" class="headerlink" title="VIPER"></a>VIPER</h2><h3 id="技术型的"><a href="#技术型的" class="headerlink" title="技术型的"></a>技术型的</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zero.rate &lt;- apply(xx, 1, function(x)&#123;length(x[x == 0])&#125;)/n</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zero.matrix &lt;- apply(zero.matrix, 2, as.numeric)</span><br></pre></td></tr></table></figure>

<h4 id="apply"><a href="#apply" class="headerlink" title="apply(,,)"></a>apply(,,)</h4><p>第一个参数是指要参与计算的<strong>矩阵</strong><br>第二个参数是指按行计算还是按列计算，1——表示按<strong>行</strong>计算，2——按<strong>列</strong>计算<br>第三个参数是指具体的运算参数。 (sum ,可以自定义，此处是自定义)</p>
<p>第三个参数为as.numeric不知道有什么用？<br>as.numeric 转化成整数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag &lt;-  zero.rate &lt;= percentage.cutoff</span><br></pre></td></tr></table></figure>

<h4 id="运算符号"><a href="#运算符号" class="headerlink" title="运算符号"></a>运算符号</h4><p>&lt;=<br>检查第一向量的每个元素是否小于或等于第二向量的相应元素。</p>
<p>%%<br>两个向量求余<br>％/％<br>两个向量相除求商<br>^<br>将第二向量作为第一向量的指数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D &lt;- D + Y[i, ]%*%t(Y[i, ])</span><br></pre></td></tr></table></figure>

<p>%*%<br>表示通常意义下的两个矩阵的乘积</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(percentage.cutoff &gt;= 0.25)</span><br><span class="line">    warnings(&apos;The prediction model may not be accurate since there are not enough genes that have low zero rates.&apos;)</span><br></pre></td></tr></table></figure>

<h4 id="warnings-‘’"><a href="#warnings-‘’" class="headerlink" title="warnings(‘’)"></a>warnings(‘’)</h4><p>友好提示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xx &lt;- as.matrix(xx)</span><br></pre></td></tr></table></figure>

<h4 id="as-matrix"><a href="#as-matrix" class="headerlink" title="as.matrix()"></a>as.matrix()</h4><p>将其参数转换为矩阵</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data &lt;- logxx[round(runif(num)*p), ]</span><br></pre></td></tr></table></figure>

<h4 id="runif"><a href="#runif" class="headerlink" title="runif()"></a>runif()</h4><p>runif()函数用于生成从0到1区间范围内的服从正态分布的随机数，每次生成的值都不一样；set.seed()用于生成随机数的种子元素，两个函数配合起来发挥作用。</p>
<h4 id="round"><a href="#round" class="headerlink" title="round()"></a>round()</h4><p>round函数用于舍入到最接近的整数。round(2.1) = 2;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">selection &lt;- match.arg(selection)</span><br></pre></td></tr></table></figure>

<h4 id="match-arg"><a href="#match-arg" class="headerlink" title="match.arg()"></a>match.arg()</h4><p>match.arg可以用来做类型匹配</p>
<h4 id><a href="#" class="headerlink" title="$"></a>$</h4><p>当一个函数里需要返回多个值（比如有变量，有向量，有矩阵）时，我们要用list,而不是return，这时如果想提取某个变量的结果，就需要用到$，默认情况下，对于 ‘list’, ‘environment’这两种对象，$ 可以提取（extract）出里面的元素。<br>x$y  等价于 x[[“y”, exact = FALSE]]，用于获取dataframe或者list里面的某个变量，比如mtcars$cyl 和 diamonds$carat。不同之处在于 $ 可以部分匹配变量名，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x &lt;- list(abc = 1)</span><br><span class="line">x$a</span><br><span class="line">#&gt; [1] 1</span><br><span class="line">x[[&quot;a&quot;]]</span><br><span class="line">#&gt; NULL</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RcppExports.R</span><br></pre></td></tr></table></figure>

<h4 id="RcppExports-R"><a href="#RcppExports-R" class="headerlink" title="RcppExports.R"></a>RcppExports.R</h4><p>其不可删除，删除了也会自动再出现。其调用了.cpp的函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">suppressMessages(require(quadprog))</span><br></pre></td></tr></table></figure>

<h4 id="suppressMessages"><a href="#suppressMessages" class="headerlink" title="suppressMessages()"></a>suppressMessages()</h4><p>使用suppressMessages运行的时候不显示提示信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d &lt;- rep(0, k)</span><br></pre></td></tr></table></figure>

<h4 id="rep-x-time-length-each"><a href="#rep-x-time-length-each" class="headerlink" title="rep(x, time = , length = , each = ,)"></a>rep(x, time = , length = , each = ,)</h4><p>x：代表的是你要进行复制的对象，可以是一个向量或者是一个因子。<br>times：代表的是复制的次数，只能为正数。负数以及NA值都会为错误值。复制是指的是对整个向量进行复制。<br>each：代表的是对向量中的每个元素进行复制的次数。<br>length.out：代表的是最终输出向量的长度。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例子</span><br><span class="line">rep(1:4, 2)  #对向量（1,2,3,4）复制两次</span><br><span class="line">[1] 1 2 3 4 1 2 3 4</span><br><span class="line">rep(1:4, each = 2)   #对向量（1,2,3,4）中的每个元素复制两次</span><br><span class="line">[1] 1 1 2 2 3 3 4 4</span><br><span class="line">rep(1:4, each = 2, length.out = 4)  #最后输出向量的长度为4</span><br><span class="line">[1] 1 1 2 2</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A &lt;- rbind(diag(k), - diag(k))</span><br></pre></td></tr></table></figure>

<h4 id="rbind-a-b"><a href="#rbind-a-b" class="headerlink" title="rbind(a,b)"></a>rbind(a,b)</h4><p>cbind： 根据列进行合并，即叠加所有列，m列的矩阵与n列的矩阵cbind()最后变成m+n列，合并前提：cbind(a, c)中矩阵a、c的行数必需相符</p>
<p>rbind： 根据行进行合并，就是行的叠加，m行的矩阵与n行的矩阵rbind()最后变成m+n行，合并前提：rbind(a, c)中矩阵a、c的列数必需相符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例子</span><br><span class="line">&gt; a &lt;- matrix(1:12, 3, 4)</span><br><span class="line">&gt; print(a)</span><br><span class="line">     [,1] [,2] [,3] [,4]</span><br><span class="line">[1,]    1    4    7   10</span><br><span class="line">[2,]    2    5    8   11</span><br><span class="line">[3,]    3    6    9   12</span><br><span class="line">&gt; </span><br><span class="line">&gt; b &lt;- matrix(-1:-12, 3, 4)</span><br><span class="line">&gt; print(b)</span><br><span class="line">     [,1] [,2] [,3] [,4]</span><br><span class="line">[1,]   -1   -4   -7  -10</span><br><span class="line">[2,]   -2   -5   -8  -11</span><br><span class="line">[3,]   -3   -6   -9  -12</span><br><span class="line">&gt; </span><br><span class="line">&gt; x=cbind(a,b)</span><br><span class="line">&gt; print(x)</span><br><span class="line">     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]</span><br><span class="line">[1,]    1    4    7   10   -1   -4   -7  -10</span><br><span class="line">[2,]    2    5    8   11   -2   -5   -8  -11</span><br><span class="line">[3,]    3    6    9   12   -3   -6   -9  -12</span><br><span class="line">&gt; </span><br><span class="line">&gt; y=rbind(a,b)</span><br><span class="line">&gt; print(y)</span><br><span class="line">     [,1] [,2] [,3] [,4]</span><br><span class="line">[1,]    1    4    7   10</span><br><span class="line">[2,]    2    5    8   11</span><br><span class="line">[3,]    3    6    9   12</span><br><span class="line">[4,]   -1   -4   -7  -10</span><br><span class="line">[5,]   -2   -5   -8  -11</span><br><span class="line">[6,]   -3   -6   -9  -12</span><br></pre></td></tr></table></figure>

<h4 id="diag"><a href="#diag" class="headerlink" title="diag()"></a>diag()</h4><p>diag()提取或替换一个矩阵的对角线,或构造一个对角矩阵。<br>语法：<br>diag(x = 1, nrow, ncol)<br>diag(x) &lt;- value<br>解析：<br>x：一个矩阵,向量或一维数组,或不填写。<br>nrow, ncol：可选 行列。<br>value ：对角线的值，可以是一个值或一个向量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例子</span><br><span class="line">&gt; x &lt;- matrix(1:16,nrow=4,ncol=4)</span><br><span class="line">&gt; x</span><br><span class="line">     [,1] [,2] [,3] [,4]</span><br><span class="line">[1,]    1    5    9   13</span><br><span class="line">[2,]    2    6   10   14</span><br><span class="line">[3,]    3    7   11   15</span><br><span class="line">[4,]    4    8   12   16</span><br><span class="line">&gt; diag(x)</span><br><span class="line">[1]  1  6 11 16</span><br><span class="line">#展示x的对角线数据</span><br><span class="line"></span><br><span class="line">&gt; diag(diag(x))</span><br><span class="line">     [,1] [,2] [,3] [,4]</span><br><span class="line">[1,]    1    0    0    0</span><br><span class="line">[2,]    0    6    0    0</span><br><span class="line">[3,]    0    0   11    0</span><br><span class="line">[4,]    0    0    0   16</span><br><span class="line">#由x的对角线数据生成对角矩阵</span><br><span class="line"></span><br><span class="line">&gt; diag(4)</span><br><span class="line">     [,1] [,2] [,3] [,4]</span><br><span class="line">[1,]    1    0    0    0</span><br><span class="line">[2,]    0    1    0    0</span><br><span class="line">[3,]    0    0    1    0</span><br><span class="line">[4,]    0    0    0    1</span><br><span class="line">#对角线为4个元素每个元素默认为1的对角矩阵</span><br><span class="line"></span><br><span class="line">&gt; diag(10,3,4)</span><br><span class="line">     [,1] [,2] [,3] [,4]</span><br><span class="line">[1,]   10    0    0    0</span><br><span class="line">[2,]    0   10    0    0</span><br><span class="line">[3,]    0    0   10    0</span><br><span class="line">#对角线数据位10,三行四列的矩阵</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; a&lt;-diag(4)+1</span><br><span class="line">&gt; a</span><br><span class="line">     [,1] [,2] [,3] [,4]</span><br><span class="line">[1,]    2    1    1    1</span><br><span class="line">[2,]    1    2    1    1</span><br><span class="line">[3,]    1    1    2    1</span><br><span class="line">[4,]    1    1    1    2</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Visualiztion</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">palette.gr.marray &lt;- colorRampPalette(c(&quot;white&quot;, &quot;red&quot;))(4)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="colorRampPalette-c-“white”-“red”-4"><a href="#colorRampPalette-c-“white”-“red”-4" class="headerlink" title="colorRampPalette(c(“white”, “red”))(4)"></a>colorRampPalette(c(“white”, “red”))(4)</h4><p>函数的参数c(“white”, “red”) 指的是颜色从红色渐变到红色，4 代表创建长度为4的颜色梯度<br>有了颜色梯度之后，我们就可以方便的把数值映射到颜色梯度上<br>基本的思想是，将数值排序，然后得到每个数值在排序好的序列中的顺序，其实就是rank 函数的返回值，然后利用该顺序去获取颜色</p>
<p>##　DrImpute</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">cor()</span><br></pre></td></tr></table></figure>

<p>R内置函数cor()可以用来计算相关系数：cor(x, method = c(“pearson”, “kendall”, “spearman”))，如果数据有缺失值，用cor(x, method = “pearson”, use = “complete.obs”)。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">expand.grid()</span><br></pre></td></tr></table></figure>

<p>构造一个数据框，将各参数的各水平完全搭配。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://github.com/ikwak2/DrImpute</span><br></pre></td></tr></table></figure>

<p>这个好像是经过改进的</p>
<p>主成分分析 (PCA, principal component analysis)是一种数学降维方法, 利用正交变换 (orthogonal transformation)把一系列可能线性相关的变量转换为一组线性不相关的新变量，也称为主成分，从而利用新变量在更小的维度下展示数据的特征。</p>
<p>主成分是原有变量的线性组合，其数目不多于原始变量。组合之后，相当于我们获得了一批新的观测数据，这些数据的含义不同于原有数据，但包含了之前数据的大部分特征，并且有着较低的维度，便于进一步的分析。</p>
<p>在空间上，PCA可以理解为把原始数据投射到一个新的坐标系统，第一主成分为第一坐标轴，它的含义代表了原始数据中多个变量经过某种变换得到的新变量的变化区间；第二成分为第二坐标轴，代表了原始数据中多个变量经过某种变换得到的第二个新变量的变化区间。这样我们把利用原始数据解释样品的差异转变为利用新变量解释样品的差异。</p>
]]></content>
      <categories>
        <category>ML&amp;DL</category>
      </categories>
      <tags>
        <tag>Dropouts课题(刘世超老师)</tag>
      </tags>
  </entry>
  <entry>
    <title>ideaVim-easymotion 插件</title>
    <url>/2020/02/23/ideaVim-easymotion%20%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h4 id="作用：辅助（优化）ideaVim的"><a href="#作用：辅助（优化）ideaVim的" class="headerlink" title="作用：辅助（优化）ideaVim的"></a>作用：辅助（优化）ideaVim的</h4><p>主要是通过提升了<strong>跳转</strong>方式<br>一般的：<br><code>gg, G</code>最上、最下<br><code>Ctrl-D/U</code>下几步，上几步</p>
<p>网上教程不多，具体更多详细教程：<br><a href="http://www.wklken.me/posts/2015/06/07/vim-plugin-easymotion.html" target="_blank" rel="noopener">http://www.wklken.me/posts/2015/06/07/vim-plugin-easymotion.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>hadoop</title>
    <url>/2019/11/29/hadoop/</url>
    <content><![CDATA[<blockquote>
<p>sudo useradd -m hadoop -s /bin/bash</p>
</blockquote>
<blockquote>
<p>sudo passwd hadoop</p>
</blockquote>
<blockquote>
<p>sudo adduser hadoop sudo</p>
</blockquote>
<blockquote>
<p>ssh localhost</p>
</blockquote>
<blockquote>
<p>cd ~/.ssh/    # 若没有该目录，请先执行一次ssh localhost</p>
</blockquote>
<blockquote>
<p>ssh-keygen -t dsa    # 会有提示，都按回车就可以</p>
</blockquote>
<blockquote>
<p>cat id_dsa.pub &gt;&gt; authorized_keys   # 加入授权 id_rsa是私钥 id_rsa.pub</p>
</blockquote>
<blockquote>
<p>chmod 600 ./authorized_keys </p>
</blockquote>
<p>对于伪分布式，需要修改相应的配置文件</p>
<p>尝试了五六次，Hadoop至今没有搭建好，感觉VM很不上手，各种bug抛出<br>TODO：有机会一定要安装好！</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode寒假6题</title>
    <url>/2020/02/04/leetcode%E5%AF%92%E5%81%876%E9%A2%98/</url>
    <content><![CDATA[<h3 id="1-快乐数字"><a href="#1-快乐数字" class="headerlink" title="1.快乐数字"></a>1.快乐数字</h3><blockquote>
<p>一个“快乐数”定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数。</p>
</blockquote>
<p><strong>关键判断</strong>:若不是快乐数，会进入死循环，如何终至死循环，将每次变换过后的值存入HashSet中，判断是否出现过重复值，出现则return false;</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHappy</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        set.add(n);</span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">1</span>)&#123;</span><br><span class="line">            n = change(n);</span><br><span class="line">            <span class="keyword">if</span>(set.contains(n)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            set.add(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">0</span>)&#123;</span><br><span class="line">            num = n%<span class="number">10</span>;</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">            sum += num*num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此题不建议用集合记录每次的计算结果来判断是否进入循环，因为这个集合可能大到无法存储；另外，也不建议使用递归，同理，如果递归层次较深，会直接导致调用栈崩溃。不要因为这个题目给出的整数是int型而投机取巧。</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isHappy</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        already = set()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> n != <span class="number">1</span>:</span><br><span class="line">            num = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">                tmp = n % <span class="number">10</span></span><br><span class="line">                num += tmp**<span class="number">2</span></span><br><span class="line">                n //= <span class="number">10</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> num <span class="keyword">in</span> already:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                already.add(num)</span><br><span class="line">            </span><br><span class="line">            n = num</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h3 id="2-旋转字符串"><a href="#2-旋转字符串" class="headerlink" title="2.旋转字符串"></a>2.旋转字符串</h3><blockquote>
<p>给定两个字符串, A 和 B。A 的旋转操作就是将 A 最左边的字符移动到最右边。 例如, 若 A = ‘abcde’，在移动一次之后结果就是’bcdea’ 。如果在若干次旋转操作之后，A 能变成B，那么返回True。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">rotateString</span><span class="params">(String A, String B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> A.length() == B.length() &amp;&amp; (A+A).contains(B);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>两个拼起来就包含了所有的情况</p>
<h3 id="3-字母大小写全排列"><a href="#3-字母大小写全排列" class="headerlink" title="3.字母大小写全排列"></a>3.字母大小写全排列</h3><blockquote>
<p>给定一个字符串S，通过将字符串S中的每个字母转变大小写，我们可以获得一个新的字符串。<strong>返回所有可能得到的字符串集合。</strong></p>
</blockquote>
<p>回溯算法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">letterCasePermutation</span><span class="params">(String S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = S.length();</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span>[] charArray = <span class="keyword">new</span> <span class="keyword">char</span>[len];</span><br><span class="line">        dfs(S, <span class="number">0</span>, len, charArray, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(String S, <span class="keyword">int</span> start, <span class="keyword">int</span> len, <span class="keyword">char</span>[] charArray, List&lt;String&gt; res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start == len) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> String(charArray));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        charArray[start] = S.charAt(start);</span><br><span class="line">        dfs(S, start + <span class="number">1</span>, len, charArray, res);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果是字符，就可以派生出一个新分支</span></span><br><span class="line">        <span class="keyword">if</span> (Character.isLetter(S.charAt(start))) &#123;</span><br><span class="line">            <span class="comment">// 这一步直接修改，相当于回溯</span></span><br><span class="line">            charArray[start] = (<span class="keyword">char</span>) (S.charAt(start) ^ (<span class="number">1</span> &lt;&lt; <span class="number">5</span>));</span><br><span class="line">            dfs(S, start + <span class="number">1</span>, len, charArray, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-存在重复元素"><a href="#4-存在重复元素" class="headerlink" title="4.存在重复元素"></a>4.存在重复元素</h3><blockquote>
<p>给定一个整数数组，判断是否存在重复元素。如果任何值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;(nums.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x: nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (set.contains(x)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        set.add(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-各位相加"><a href="#5-各位相加" class="headerlink" title="5.各位相加"></a>5.各位相加</h3><blockquote>
<p>给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。</p>
</blockquote>
<p>常规以外<strong>神奇的算法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addDigits</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (num - <span class="number">1</span>) % <span class="number">9</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-柠檬水找零"><a href="#6-柠檬水找零" class="headerlink" title="6.柠檬水找零"></a>6.柠檬水找零</h3><blockquote>
<p>在柠檬水摊上，每一杯柠檬水的售价为 5 美元。顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。注意，一开始你手头没有任何零钱。如果你能给每位顾客正确找零，返回 true ，否则返回 false </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lemonadeChange</span><span class="params">(<span class="keyword">int</span>[] bills)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bills == <span class="keyword">null</span> || bills.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (bills[<span class="number">0</span>] != <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> money[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];<span class="comment">// 5 10 15</span></span><br><span class="line">        money[<span class="number">0</span>]++;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; bills.length;i++) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (bills[i]) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                    money[<span class="number">0</span>]++;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                    money[<span class="number">1</span>]++;</span><br><span class="line">                    money[<span class="number">0</span>]--;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span> (money[<span class="number">0</span>] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">20</span>:</span><br><span class="line">                    money[<span class="number">2</span>]++;</span><br><span class="line">                    <span class="keyword">if</span> (money[<span class="number">1</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        money[<span class="number">1</span>]--;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        money[<span class="number">0</span>] -= <span class="number">2</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    money[<span class="number">0</span>]--;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span> (money[<span class="number">0</span>] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>pandas读取excel</title>
    <url>/2020/02/17/pandas%E8%AF%BB%E5%8F%96excel/</url>
    <content><![CDATA[<h4 id="pandas处理excel数据非常便捷"><a href="#pandas处理excel数据非常便捷" class="headerlink" title="pandas处理excel数据非常便捷"></a>pandas处理excel数据非常便捷</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">r'F:\C\train_01.xlsx'</span>)</span><br><span class="line">data=df.loc[:,[<span class="string">'留言详情'</span>,<span class="string">'一级分类'</span>]].values<span class="comment">#读所有行的title以及data列的值，这里需要嵌套列表</span></span><br><span class="line"><span class="comment"># data=df.loc[:,['留言详情']].values</span></span><br><span class="line">print(<span class="string">"读取指定行的数据：\n&#123;0&#125;"</span>.format(data))</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;class 'numpy.ndarray'&gt; 将此转化成列表</span></span><br><span class="line">x = df.stack().tolist()</span><br><span class="line"></span><br><span class="line">data_01=[]</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> x:</span><br><span class="line">    sentence = line.strip().replace(<span class="string">u'\u3000'</span>, <span class="string">u' '</span>).replace(<span class="string">u'\xa0'</span>, <span class="string">u' '</span>).replace(<span class="string">" "</span>, <span class="string">""</span>).replace(<span class="string">"\r"</span>, <span class="string">""</span>).replace(<span class="string">"\n"</span>, <span class="string">""</span>)</span><br><span class="line">    data_01.append(sentence) </span><br><span class="line">    </span><br><span class="line"><span class="comment"># \u3000 是全角的空白符</span></span><br><span class="line"><span class="comment"># 终于把\n和\r给换掉了</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>leetcode之数组类</title>
    <url>/2020/02/19/leetcode%E6%95%B0%E7%BB%84%E7%B1%BB/</url>
    <content><![CDATA[<p><em>使用C/C++做法</em></p>
<h3 id="主要元素"><a href="#主要元素" class="headerlink" title="主要元素"></a>主要元素</h3><p><a href="https://leetcode-cn.com/problems/find-majority-element-lcci/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/find-majority-element-lcci/</a></p>
<p>快排</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i + k &lt; numsSize ;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums[i] == nums[i+k])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> nums[i];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>超时</p>
<blockquote>
<p><strong>摩尔投票算法</strong>是基于这个事实：每次从序列里选择两个不相同的数字删除掉（或称为“抵消”），最后剩下一个数字或几个相同的数字，就是出现次数大于总数一半的那个。<br>核心就是<strong>对拼消耗</strong>。<br>知乎讲解：<a href="https://www.zhihu.com/question/49973163" target="_blank" rel="noopener">https://www.zhihu.com/question/49973163</a></p>
</blockquote>
<h2 id="消失的数字"><a href="#消失的数字" class="headerlink" title="消失的数字"></a>消失的数字</h2><p><a href="https://leetcode-cn.com/problems/missing-number-lcci/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/missing-number-lcci/</a></p>
<blockquote>
<p>M：<br>构建一个辅助数组，遇到了就是0，没有遇到就是1，最后再找到那个值</p>
</blockquote>
<ol>
<li><p>第一种方法：<br>1）计算总和<br>2）用数列公式 - 总和</p>
</li>
<li><p>第二种方法：<br>1）边加边减</p>
</li>
</ol>
<h2 id="合并排序的数组"><a href="#合并排序的数组" class="headerlink" title="合并排序的数组"></a>合并排序的数组</h2><p><a href="https://leetcode-cn.com/problems/sorted-merge-lcci/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/sorted-merge-lcci/</a></p>
<blockquote>
<p>方法 1: 直接合并后排序<br>方法 2: 双指针<br>方法3：逆向双指针 （不需要额外开辟空间，但前提是前一个的容量要足够大）</p>
</blockquote>
<h2 id="连续数列"><a href="#连续数列" class="headerlink" title="连续数列"></a>连续数列</h2><p><a href="https://leetcode-cn.com/problems/contiguous-sequence-lcci/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/contiguous-sequence-lcci/</a></p>
<blockquote>
<p>题的关键是要理解这么一层含义：对于数组 nums = [5, -9, 6, -2, 3]，5 是否要加 -9，取决于 -9 后面的正数是否能抵消 -9 并还有剩余。<br>一般称这种为贪心问题</p>
</blockquote>
<p><strong>动态规划</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> b = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> sum = b;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;nums.length;i++)&#123;</span><br><span class="line">			<span class="comment">//b = b&lt;0? nums[i]:b+nums[i];</span></span><br><span class="line">            <span class="keyword">if</span>(b&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                b=nums[i];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                b+=nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(b&gt;sum)&#123;</span><br><span class="line">                sum=b;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>分治算法</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分治法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.size() == <span class="number">0</span>) <span class="keyword">return</span> INT_MIN;</span><br><span class="line">    <span class="keyword">return</span> divide(nums,<span class="number">0</span>,nums.size()<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left == right) <span class="keyword">return</span> nums[left];</span><br><span class="line">    <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 1. 最大数列和在左边</span></span><br><span class="line">    <span class="keyword">int</span> sumLeft = divide(nums,left,mid);</span><br><span class="line">    <span class="comment">// 2. 最大数列和在右边</span></span><br><span class="line">    <span class="keyword">int</span> sumRight = divide(nums,mid+<span class="number">1</span>,right);</span><br><span class="line">    <span class="comment">// 3. 最大数列和在中间</span></span><br><span class="line">    <span class="comment">// 先求左边的最大和</span></span><br><span class="line">    <span class="keyword">int</span> leftSum = <span class="number">0</span>,leftMaxSum = INT_MIN;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = mid; i &gt;= left; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        leftSum += nums[i];</span><br><span class="line">        leftMaxSum = max(leftMaxSum,leftSum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 求右边的最大和</span></span><br><span class="line">    <span class="keyword">int</span> rightSum = <span class="number">0</span>,rightMaxSum = INT_MIN;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = mid + <span class="number">1</span>; i &lt;= right; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rightSum += nums[i];</span><br><span class="line">        rightMaxSum = max(rightMaxSum,rightSum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max(max(sumLeft,sumRight),leftMaxSum+rightMaxSum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="在排序数组中查找数字-I"><a href="#在排序数组中查找数字-I" class="headerlink" title="在排序数组中查找数字 I"></a>在排序数组中查找数字 I</h2><p><a href="https://leetcode-cn.com/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/</a></p>
<p><strong>二分查找法找到第一次出现的位置和最后一次出现的位置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= j) &#123;</span><br><span class="line">            <span class="keyword">int</span> m = (i + j) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[m] &lt;= target) i = m + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> j = m - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> right = i;</span><br><span class="line"></span><br><span class="line">        i = <span class="number">0</span>; j = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= j) &#123;</span><br><span class="line">            <span class="keyword">int</span> m = (i + j) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[m] &lt; target) i = m + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> j = m - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = j;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> right - left - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>python爬取网易云音乐下载到本地</title>
    <url>/2019/12/07/python%E7%88%AC%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E4%B8%8B%E8%BD%BD%E5%88%B0%E6%9C%AC%E5%9C%B0/</url>
    <content><![CDATA[<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding=utf8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Referer'</span>: <span class="string">'http://music.163.com/'</span>,</span><br><span class="line">    <span class="string">'Host'</span>: <span class="string">'music.163.com'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.75 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 歌单的url地址，如果存在一个#就不行，现在的网址都存在一个#号</span></span><br><span class="line">play_url = <span class="string">'http://music.163.com/playlist?id=3204486765'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取页面内容</span></span><br><span class="line">s = requests.session()</span><br><span class="line">response = s.get(play_url, headers=headers).content</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用bs4匹配出对应的歌曲名称和地址</span></span><br><span class="line">s = BeautifulSoup(response, <span class="string">'lxml'</span>)</span><br><span class="line">main = s.find(<span class="string">'ul'</span>, &#123;<span class="string">'class'</span>: <span class="string">'f-hide'</span>&#125;)</span><br><span class="line"></span><br><span class="line">lists = []</span><br><span class="line"><span class="keyword">for</span> music <span class="keyword">in</span> main.find_all(<span class="string">'a'</span>):</span><br><span class="line">    list = []</span><br><span class="line">    <span class="comment"># print('&#123;&#125; : &#123;&#125;'.format(music.text, music['href']))</span></span><br><span class="line">    musicUrl = <span class="string">'http://music.163.com/song/media/outer/url'</span> + music[<span class="string">'href'</span>][<span class="number">5</span>:] + <span class="string">'.mp3'</span></span><br><span class="line">    musicName = music.text</span><br><span class="line">    <span class="comment"># 单首歌曲的名字和地址放在list列表中</span></span><br><span class="line">    list.append(musicName)</span><br><span class="line">    list.append(musicUrl)</span><br><span class="line">    <span class="comment"># 全部歌曲信息放在lists列表中</span></span><br><span class="line">    lists.append(list)</span><br><span class="line"></span><br><span class="line">print(lists)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载列表中的全部歌曲，并以歌曲名命名下载后的文件，文件位置为当前文件夹</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lists:</span><br><span class="line">    url = i[<span class="number">1</span>]</span><br><span class="line">    name = i[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">'正在下载'</span>, name)</span><br><span class="line">        urllib.request.urlretrieve(url, <span class="string">'./%s.mp3'</span> % name)</span><br><span class="line">        print(<span class="string">'下载成功'</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'下载失败'</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python爬虫</category>
      </categories>
      <tags>
        <tag>Python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot实战项目——短链接设计</title>
    <url>/2020/02/14/shortUrl/</url>
    <content><![CDATA[<hr>
<p>短链接的生成，可以有两种方法。<br>第一种，直接调用百度API一类网址生成短链接<br>第二种，当我们生成短链接之后，只需要在表中（数据库或者NoSql ）存储原始链接与短链接的<strong>映射关系</strong>即可。当我们访问短链接时，只需要从映射关系中找到原始链接，即可跳转到原始链接。</p>
<h2 id="SpringBoot连接Mysql数据库"><a href="#SpringBoot连接Mysql数据库" class="headerlink" title="SpringBoot连接Mysql数据库"></a>SpringBoot连接Mysql数据库</h2><blockquote>
<p>　Spring连接Mysql的方式有很多，例如JDBC，Spring JPA，Hibeirnate，Mybatis等</p>
</blockquote>
<h4 id="JDBC依赖导入"><a href="#JDBC依赖导入" class="headerlink" title="JDBC依赖导入"></a>JDBC依赖导入</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="配置数据库的文件"><a href="#配置数据库的文件" class="headerlink" title="配置数据库的文件"></a>配置数据库的文件</h4><p>(喜欢yml)</p>
<ul>
<li><p>application.properties</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring.datasource.url: jdbc:mysql://127.0.0.1:3306/DataName?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone = GMT</span><br><span class="line">spring.datasource.username:root</span><br><span class="line">spring.datasource.password:root</span><br><span class="line">spring.datasource.driver-class-name:com.mysql.jdbc</span><br></pre></td></tr></table></figure>
</li>
<li><p>application.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment">#   数据源基本配置</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="attr">dbc:mysql://192.168.26.128:3306/Mybatis?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>1.创建数据库（shorturl），创建一个表，存储长链接和与之对应的短链接；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`link`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`long_url`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'长链接'</span>,</span><br><span class="line">  <span class="string">`short_url`</span> <span class="built_in">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'短链接'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=MyISAM AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- AUTO_INCREMENT 自增 AUTO_INCREMENT=1 从开始增加</span></span><br><span class="line"><span class="comment">-- PRIMAPY是主键的意思，表示定义的该列值在表中是唯一的意思，不可以有重复。</span></span><br><span class="line"><span class="comment">-- ENGINE InnoDB锁定表中的特定行，并MyISAM锁定整个MySQL表。</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="连接虚拟机的数据库"><a href="#连接虚拟机的数据库" class="headerlink" title="连接虚拟机的数据库"></a>连接虚拟机的数据库</h2><h3 id="查看电脑的IP地址"><a href="#查看电脑的IP地址" class="headerlink" title="查看电脑的IP地址"></a>查看电脑的IP地址</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifconfig -a</span><br></pre></td></tr></table></figure>

<p>192.168.26.128</p>
<h4 id="数据库的操作"><a href="#数据库的操作" class="headerlink" title="数据库的操作"></a>数据库的操作</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> 名字 建表 </span><br><span class="line"><span class="keyword">use</span> 数据库名; //到达某一数据库</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>; //列出所有表</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">link</span>(<span class="keyword">id</span>,long_url,short_url)</span><br><span class="line"><span class="keyword">values</span> (<span class="string">'1'</span>,<span class="string">'https://jingyan.baidu.com/article/ca41422f0be18e1eae99ed15.html'</span>,<span class="string">'Abj876'</span>);</span><br></pre></td></tr></table></figure>

<hr>
<p>查看前端向后台发送的请求:F12 -&gt; network -&gt; XHR</p>
<h3 id="懒人站长"><a href="#懒人站长" class="headerlink" title="懒人站长"></a>懒人站长</h3><p><a href="http://www.ab173.com/zhanzhang/getheader.php" target="_blank" rel="noopener">http://www.ab173.com/zhanzhang/getheader.php</a><br>查看网页HTTP状态代码检测<br>测试<br>新浪网址（永久短网址） 查不出状态码<br>百度短网址 返回302<br>加密短网址 返回302<br>腾讯短网址 返回302</p>
<h4 id="get和post请求"><a href="#get和post请求" class="headerlink" title="get和post请求"></a>get和post请求</h4><p>GET和POST是什么？HTTP协议中的两种发送请求的方法。</p>
<blockquote>
<p>HTTP规定，当执行GET请求的时候，要给汽车贴上GET的标签（设置method为GET），而且要求把传送的数据放在车顶上（url中）以方便记录。如果是POST请求，就要在车上贴上POST的标签，并把货物放在车厢里。如果你用GET服务，在request body偷偷藏了数据，不同服务器的处理方式也是不同的，有些服务器会帮你卸货，读出数据，有些服务器直接忽略，所以，虽然GET可以带request body，也不能保证一定能被接收到哦。</p>
</blockquote>
<blockquote>
<p>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；<br>而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。<br>也就是说，GET只需要汽车跑一趟就把货送到了，而POST得跑两趟，第一趟，先去和服务器打个招呼“嗨，我等下要送一批货来，你们打开门迎接我”，然后再回头把货送过去。<br>参考博客：<a href="https://www.cnblogs.com/logsharing/p/8448446.html" target="_blank" rel="noopener">https://www.cnblogs.com/logsharing/p/8448446.html</a><br>风格挺有意思的</p>
</blockquote>
<h3 id="映射文件"><a href="#映射文件" class="headerlink" title="映射文件"></a>映射文件</h3><h5 id="映射实体类的数据类型"><a href="#映射实体类的数据类型" class="headerlink" title="映射实体类的数据类型"></a>映射实体类的数据类型</h5><p>resultMap: 唯一标识<br>column: 库表的字段名<br>property： 实体类里的属性名</p>
<p>配置映射文件：(摘自网络)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- namespace:当前库表映射文件的命名空间，唯一的不能重复 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.hao947.sql.mapper.PersonMapper"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- type:映射实体类的数据类型 id：resultMap的唯一标识 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"person"</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- column:库表的字段名 property:实体类里的属性名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"person_id"</span> <span class="attr">property</span>=<span class="string">"personId"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"person_addr"</span> <span class="attr">property</span>=<span class="string">"personAddr"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--id:当前sql的唯一标识</span></span><br><span class="line"><span class="comment">     parameterType：输入参数的数据类型 </span></span><br><span class="line"><span class="comment">     resultType：返回值的数据类型 </span></span><br><span class="line"><span class="comment">     #&#123;&#125;:用来接受参数的，如果是传递一个参数#&#123;id&#125;内容任意，如果是多个参数就有一定的规则,采用的是预编译的形式select </span></span><br><span class="line"><span class="comment">    * from person p where p.id = ? ，安全性很高 --&gt;</span></span><br></pre></td></tr></table></figure>

<p>yml文件的key与value之间必须至少空一空格</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line">  <span class="attr">mapper-locations:</span> <span class="attr">classpath:mapper/*.xml</span></span><br><span class="line"><span class="comment"># it is forbidden to  specify block composed value at the same line as key classpath后面不能空格</span></span><br></pre></td></tr></table></figure>

<h5 id="Maven与Gradle的对比"><a href="#Maven与Gradle的对比" class="headerlink" title="Maven与Gradle的对比"></a>Maven与Gradle的对比</h5><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span>(<span class="string">"org.springframework.boot:spring-boot-gradle-plugin:1.2.6.RELEASE"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span>(<span class="string">"org.springframework.boot:spring-boot-starter-web"</span>) &#123;</span><br><span class="line">        <span class="keyword">exclude</span> module: <span class="string">"spring-boot-starter-tomcat"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">compile</span>(<span class="string">"org.springframework.boot:spring-boot-starter-security"</span>)</span><br><span class="line">    <span class="keyword">compile</span>(<span class="string">"org.springframework.boot:spring-boot-starter-data-jpa"</span>)</span><br><span class="line">    testCompile(<span class="string">"mysql:mysql-connector-java:5.1.25"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>仔细阅读下你会发现，原来是依赖管理所需的配置长度变短了。在pom.xml中我们需要引入一个依赖时需要将它的groupId, artifactId和version都用标签引起来。但是在build.gradle中你会发现，仅仅需要将三者的value用:连起来，并”调用compile函数”就可以啦。</p>
<p>这个是记录操作路上的磕磕盼盼，参考价值可能不大。</p>
<p>过程思想推荐：<br><a href="https://www.cnblogs.com/rjzheng/p/11827426.html" target="_blank" rel="noopener">https://www.cnblogs.com/rjzheng/p/11827426.html</a></p>
]]></content>
      <categories>
        <category>后台开发</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>python爬取网易云音乐歌词</title>
    <url>/2019/12/08/python%E7%88%AC%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%AD%8C%E8%AF%8D/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取网页源代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">(url)</span>:</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36'</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.get(url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> response.text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得歌曲ID</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_id</span><span class="params">(url_list)</span>:</span></span><br><span class="line">    text = get_page(url_list)</span><br><span class="line">    ids = re.findall(<span class="string">r'&lt;li&gt;&lt;a href=".*?id=(\d+)"&gt;.*?&lt;/a&gt;&lt;/li&gt;'</span>, text, re.DOTALL)</span><br><span class="line">    <span class="keyword">return</span> ids</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取歌曲名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(url_song)</span>:</span></span><br><span class="line">    text = get_page(url_song)</span><br><span class="line">    song_name = re.findall(<span class="string">r'&lt;meta name="description" content="歌曲名《(.*?)》.*?由 .*? 演唱.*?"/&gt;'</span>, text, re.DOTALL)</span><br><span class="line">    song_authors = re.findall(<span class="string">r'&lt;meta name="description" content="歌曲名《.*?》.*?由 (.*?) 演唱.*?"/&gt;'</span>, text, re.DOTALL)</span><br><span class="line">    name = song_name[<span class="number">0</span>] + <span class="string">' - '</span> + song_authors[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得歌曲图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_img</span><span class="params">(url_song, name)</span>:</span></span><br><span class="line">    text = get_page(url_song)</span><br><span class="line">    url_img = re.findall(<span class="string">r'&lt;meta property="og:image" content="(.*?)" /&gt;'</span>, text, re.DOTALL)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    root = <span class="string">"D:/"</span></span><br><span class="line">    path = root + name + <span class="string">'.jpg'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(root):</span><br><span class="line">            os.mkdir(root)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">            r = requests.get(url_img)</span><br><span class="line">            <span class="keyword">with</span> open(path, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(r.content)</span><br><span class="line">                f.close()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取歌词</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_lyric</span><span class="params">(id, name)</span>:</span></span><br><span class="line">    url_lyric = <span class="string">"http://music.163.com/api/song/lyric?id="</span> + id + <span class="string">"&amp;lv=1&amp;kv=1&amp;tv=-1"</span></span><br><span class="line">    text = get_page(url_lyric)</span><br><span class="line"></span><br><span class="line">    judge_lyric = re.findall(<span class="string">r'&#123;"nolyric":true,.*?&#125;'</span>, text, re.DOTALL)</span><br><span class="line">    <span class="keyword">if</span> judge_lyric:</span><br><span class="line">        print(str(name) + <span class="string">'无歌词\n'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 用json获取歌词</span></span><br><span class="line">        json_obj = json.loads(text)</span><br><span class="line">        initial_lyric = json_obj[<span class="string">'lrc'</span>][<span class="string">'lyric'</span>]</span><br><span class="line"></span><br><span class="line">        root = <span class="string">"D://lyric//"</span></span><br><span class="line">        <span class="comment"># path = root + name + '.lrc'</span></span><br><span class="line">        <span class="comment"># 改成txt会方便看很多</span></span><br><span class="line">        path = root + name + <span class="string">'.txt'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(root):</span><br><span class="line">                os.mkdir(root)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">                <span class="keyword">with</span> open(path, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(initial_lyric)</span><br><span class="line">                    f.close()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬不到数据！</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'https://music.163.com/playlist?id=3185999809'</span></span><br><span class="line">    <span class="comment"># url = 'https://music.163.com/playlist?id=391228182' # 歌单url</span></span><br><span class="line">    ids = get_id(url)</span><br><span class="line">    names = []</span><br><span class="line"></span><br><span class="line">    fns_num = <span class="number">1</span></span><br><span class="line">    num = len(ids)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> id <span class="keyword">in</span> ids:</span><br><span class="line">        url_song = <span class="string">'https://music.163.com/song?id=%s'</span> % id</span><br><span class="line">        name = get_name(url_song)</span><br><span class="line">        get_img(url_song, name)</span><br><span class="line">        get_lyric(id, name)</span><br><span class="line">        names.append(name)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"\r完成进度: &#123;:.2f&#125;%"</span>.format(fns_num * <span class="number">100</span> / num), end=<span class="string">""</span>)</span><br><span class="line">        fns_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n\n完成名单：'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> names:</span><br><span class="line">        print(i)</span><br><span class="line">    print(<span class="string">'\n\n查找到的数量:'</span> + str(num))</span><br><span class="line">    print(<span class="string">'\n最终完成的数量:'</span> + str(len(names)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span>把前面的时长处理掉吧</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python爬虫</category>
      </categories>
      <tags>
        <tag>Python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>srf之论文汇报流程</title>
    <url>/2020/03/29/srf%E4%B9%8B%E8%AE%BA%E6%96%87%E6%B1%87%E6%8A%A5%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="论文将要讲述的方面"><a href="#论文将要讲述的方面" class="headerlink" title="论文将要讲述的方面"></a>论文将要讲述的方面</h2><ol>
<li>为什么要讲这个?（背景）</li>
<li>提出了什么 <strong>方法</strong> ?</li>
<li>传统方法有什么问题?（<strong>对比</strong>）</li>
<li><strong>原理</strong>简单讲一讲（数学方面要求不是很高，有代码实现更方便）?</li>
<li><strong>数据集</strong>是怎么<strong>划分</strong>的?</li>
<li><strong>交叉验证</strong>怎么做?</li>
</ol>
<h2 id="研究方法和主题"><a href="#研究方法和主题" class="headerlink" title="研究方法和主题"></a>研究方法和主题</h2><p>学长说在GCN方面不会有更深入的探寻了，会在以下几个方面找突破口</p>
<ul>
<li>Attention机制</li>
<li>知识图谱</li>
<li>异构图网络的学习</li>
<li>嵌入式学习</li>
</ul>
<h2 id="论文的选取"><a href="#论文的选取" class="headerlink" title="论文的选取"></a>论文的选取</h2><blockquote>
<p><strong>新</strong>（前沿），在期刊上发表的更好<br>有代码最好，有名字的模型在github上可以搜索的到</p>
</blockquote>
<h2 id="学长目前的想法"><a href="#学长目前的想法" class="headerlink" title="学长目前的想法"></a>学长目前的想法</h2><ul>
<li>SMILES收集之后：通过label encoding提取smiles的embedding<br><img src="srf%E4%B9%8B%E8%AE%BA%E6%96%87%E6%B1%87%E6%8A%A5%E6%B5%81%E7%A8%8B/%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt></li>
</ul>
]]></content>
      <categories>
        <category>DeepLearning</category>
      </categories>
      <tags>
        <tag>srf</tag>
      </tags>
  </entry>
  <entry>
    <title>srf之论文阅读Dr.VAE</title>
    <url>/2020/04/01/srf%E4%B9%8B%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BBDr.VAE/</url>
    <content><![CDATA[<h1 id="Dr-VAE-improving-drug-response-prediction-via-modeling-of-drug-perturbation-effects"><a href="#Dr-VAE-improving-drug-response-prediction-via-modeling-of-drug-perturbation-effects" class="headerlink" title="Dr.VAE: improving drug response prediction via modeling of drug perturbation effects"></a>Dr.VAE: improving drug response prediction via modeling of drug perturbation effects</h1><h2 id="1-为什么要讲这个"><a href="#1-为什么要讲这个" class="headerlink" title="1. 为什么要讲这个?"></a>1. 为什么要讲这个?</h2><p><strong>Motivation:</strong><br>将<strong>生物逻辑系统的先验知识</strong>融入到这些方法中是<strong>提高预测性能</strong>的一个很有前途的途径。<br><strong>药物诱导转录组微扰效应的高通量细胞系分析</strong>(High-throughput cell line assays of drug-induced transcriptomic perturbation effects)是一项尚未完全纳入药物反应预测模型的先验知识。</p>
<h2 id="2-提出了什么方法"><a href="#2-提出了什么方法" class="headerlink" title="2. 提出了什么方法 ?"></a>2. 提出了什么方法 ?</h2><p>引入了一个统一的<strong>概率方法</strong>，<strong>Dr.VAE</strong>(Drug Response Variational Autoencoder、药物反应变分自动编码器），它同时根据<strong>活性</strong>和<strong>转录组的扰动</strong>来模拟药物反应。<del>翻译怪怪的??</del> </p>
<p>已知：</p>
<ol>
<li>VAE可以提取出具有生物学意义的癌症经切切片特征</li>
<li>在一种名为DeepProfile的药物反应预测方法中，将预先训练的VAE和单独训练的线性模型相结合。<br>我们旨在共同学习一种潜在的嵌入方法，以提高我们预测药物反应（表型结果）的能力，同时利用最初不受监督的（未知表型结果）药物每次扰动实验来帮助学习这种嵌入方法。</li>
</ol>
<p>放模型图！</p>
<h2 id="3-传统方法有什么问题-（对比）"><a href="#3-传统方法有什么问题-（对比）" class="headerlink" title="3. 传统方法有什么问题?（对比）"></a>3. 传统方法有什么问题?（对比）</h2><p>现有的机器学习算法：<br>深度学习的方法：典型的判别前馈神经网络在药物反应预测中效果不佳，很可能是由于数据限制（特征数量与样本数量）所致。</p>
<p>Result部分<br><em>代码体现</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">classif_baseline_perf</span><span class="params">(xtrain, ytrain, xtest, ytest, svmkernel=<span class="string">'rbf'</span>, rseed=None)</span>:</span></span><br><span class="line">    <span class="string">'''这个包括了和 Random Forest、LogisticRegression、SVM、SVM w/ linear kernel的对比'''</span></span><br><span class="line">    data = [xtrain, ytrain, xtest, ytest]</span><br><span class="line">    perf = OrderedDict()</span><br><span class="line"></span><br><span class="line">    <span class="comment">## Random Forest</span></span><br><span class="line">    cl = sklearn.ensemble.RandomForestClassifier(n_estimators=<span class="number">100</span>, random_state=rseed)</span><br><span class="line">    rf_perf = measure_cl_perf(cl, <span class="string">'RF100'</span>, *data)</span><br><span class="line">    perf = concat_dicts(perf, rf_perf)</span><br><span class="line"></span><br><span class="line">	<span class="comment">## LogisticRegression</span></span><br><span class="line">    cl = sklearn.linear_model.LogisticRegressionCV(penalty=<span class="string">'l2'</span>, random_state=rseed)</span><br><span class="line">    lr_perf = measure_cl_perf(cl, <span class="string">'Ridge'</span>, *data)</span><br><span class="line">    perf = concat_dicts(perf, lr_perf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## SVM </span></span><br><span class="line">    cl = sklearn.svm.SVC(kernel=svmkernel, probability=<span class="literal">True</span>, random_state=rseed)</span><br><span class="line">    svm_perf = measure_cl_perf(cl, <span class="string">'SVM'</span> + svmkernel[:<span class="number">3</span>], *data)</span><br><span class="line">    perf = concat_dicts(perf, svm_perf)</span><br><span class="line">    <span class="comment"># SVM w/ linear kernel</span></span><br><span class="line">    cl = sklearn.svm.SVC(kernel=<span class="string">'linear'</span>, probability=<span class="literal">True</span>, random_state=rseed)</span><br><span class="line">    svm_perf = measure_cl_perf(cl, <span class="string">'SVMlin'</span>, *data)</span><br><span class="line">    perf = concat_dicts(perf, svm_perf)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> perf</span><br></pre></td></tr></table></figure>

<p>measure_cl_perf()函数作用是评估，计算出的是Acc、AUROC、AUPR<br>concat_dicts()转化为字典</p>
<h2 id="4-原理简单讲一讲（数学方面要求不是很高，有代码实现更方便）"><a href="#4-原理简单讲一讲（数学方面要求不是很高，有代码实现更方便）" class="headerlink" title="4. 原理简单讲一讲（数学方面要求不是很高，有代码实现更方便）?"></a>4. 原理简单讲一讲（数学方面要求不是很高，有代码实现更方便）?</h2><h2 id="5-数据集是怎么划分的"><a href="#5-数据集是怎么划分的" class="headerlink" title="5. 数据集是怎么划分的?"></a>5. 数据集是怎么划分的?</h2><blockquote>
<p><strong>Training data sets</strong>：<strong>CTRPv2</strong>( Cancer Therapeutic Response Portal)  &amp;  <strong>CMap</strong> (CMap-L1000v1)<br><strong>Input data types</strong>：<strong>mRNA</strong> EXP (before &amp; after treatment)</p>
</blockquote>
<h3 id="两个数据集的基本介绍："><a href="#两个数据集的基本介绍：" class="headerlink" title="两个数据集的基本介绍："></a>两个数据集的基本介绍：</h3><p><strong>CTRPv2</strong>：为860个细胞系和481个药物化合物的组合<strong>提供了不同药物浓度下细胞系的相对生存能力</strong>。细胞系对<strong>药物治疗的敏感性</strong>通过<strong>剂量-反应曲线AAC</strong>上方的面积来量化，我们进一步采用瀑布法对连续的AAC进行二值化（Barretina等人，2012；Haibe-Kains等人，2013），<strong>将灵敏度预测任务转化为离散的分类任务。</strong>  <del>体现在哪里？</del><br><strong>CMap</strong>：筛选了19 811种药物化合物对多达77个细胞系中L1000个标志性基因表达的干扰效应。<br>在CMap中的实验并<strong>不能测量药物治疗的敏感性</strong>，但是一些细胞系也在CTRPv2中进行了独立的测试。我们<strong>交叉</strong>引用这些细胞系(取交集)，并将相应的标签分配给它们的扰动测量。</p>
<h3 id="实验数据选择标准："><a href="#实验数据选择标准：" class="headerlink" title="实验数据选择标准："></a>实验数据选择标准：</h3><ol>
<li>从CMap数据集，选择了在<strong>最常见浓度水平下对每种药物进行6小时的微扰实验</strong>。如果细胞系没有在选定的浓度下进行检测，我们使用最接近的检测浓度。接下来，我们将对照组（DMSO载体）实验与药物扰动实验通过批次ID和微珠ID进行匹配，以最小化病例和对照组之间的批次效应。<del>？？</del> 此外，我们通过相关性（&gt;0.75 Pearson q）过滤所选的病例对照对，以过滤出可能标记错误的实验或异常值。</li>
<li>CTRPv2和CMap-L1000v1数据集共有<strong>973</strong>个共同基因。将<strong>每个基因的表达值标准化为零均值和单位方差</strong>。为了进一步的均匀化，包括去除批效应和两个合并数据之间的差异，我们还从集合数据集中去除了第一个主成分（解释了12.8%的变化）。<br>叨叨：数据的筛选真的太讲究了<br>基于以上两个标准，我们选择了<strong>26</strong>种在CTRPv2和CMap-L1000v1数据集中测试的<strong>药物</strong>：</li>
</ol>
<ul>
<li>对于每种选择的药物，至少有<strong>8个不同的细胞系在CMap干扰实验中测试。</strong></li>
<li>CTRPv2中至少有20%的筛选细胞系在剂量-反应AAC二值化后<strong>对药物敏感</strong>。</li>
</ul>
<p><del>插图</del> </p>
<h2 id="7-交叉验证怎么做"><a href="#7-交叉验证怎么做" class="headerlink" title="7. 交叉验证怎么做?"></a>7. 交叉验证怎么做?</h2><p>通过执行20次重复的<strong>5倍交叉验证</strong>，我们生成了100个训练验证测试数据拆分。<br><em>代码体现</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSplitsByGroupKFold</span><span class="params">(groups, fold, n_splits, shuffle, random_state)</span>:</span></span><br><span class="line">    <span class="string">'''the same group will not appear in two different folds'''</span></span><br><span class="line">    <span class="keyword">assert</span> (n_splits &gt;= <span class="number">3</span>)</span><br><span class="line">    kf = GroupKFold(n_splits=n_splits)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> shuffle:</span><br><span class="line">        <span class="comment"># randomly rename groups so that the GroupKFold (which sorts by group ids first) splits can be randomized</span></span><br><span class="line">        unique_groups = np.unique(groups)</span><br><span class="line">        rnd_renames = sklearn.utils.shuffle(np.arange(len(unique_groups)), random_state=random_state)</span><br><span class="line">        groups_renamed = np.array([rnd_renames[np.argwhere(unique_groups == g)[<span class="number">0</span>]] <span class="keyword">for</span> g <span class="keyword">in</span> groups])</span><br><span class="line">        kfsplit = kf.split(X=np.zeros(groups.shape[<span class="number">0</span>]), groups=groups_renamed)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        kfsplit = kf.split(X=np.zeros(groups.shape[<span class="number">0</span>]), groups=groups)</span><br><span class="line">    allsplits = np.array([x <span class="keyword">for</span> x <span class="keyword">in</span> kfsplit])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> isinstance(fold, list) <span class="keyword">or</span> isinstance(fold, tuple):</span><br><span class="line">        <span class="keyword">assert</span> (len(fold) == <span class="number">2</span>)</span><br><span class="line">        te_fold = fold[<span class="number">0</span>]</span><br><span class="line">        va_fold = fold[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        te_fold = fold</span><br><span class="line">        va_fold = <span class="number">1</span></span><br><span class="line">    <span class="keyword">assert</span> (te_fold &gt;= <span class="number">1</span> <span class="keyword">and</span> te_fold &lt;= n_splits)      <span class="comment">## the test fold is between 1..n_splits</span></span><br><span class="line">    <span class="keyword">assert</span> (va_fold &gt;= <span class="number">1</span> <span class="keyword">and</span> va_fold &lt;= n_splits - <span class="number">1</span>)  <span class="comment">## the validation fold is between 1..(n_splits-1)</span></span><br><span class="line">    <span class="comment"># the te_fold is indexed from 1 so we need to subtract 1</span></span><br><span class="line">    te_fold_id = te_fold - <span class="number">1</span></span><br><span class="line">    va_fold_id = (te_fold_id + va_fold) % n_splits</span><br><span class="line">    ind_te = allsplits[te_fold_id][<span class="number">1</span>]</span><br><span class="line">    ind_va = allsplits[va_fold_id][<span class="number">1</span>]</span><br><span class="line">    ind_tr = np.concatenate(allsplits[np.setdiff1d(np.arange(n_splits), np.asarray([te_fold_id, va_fold_id]))][:, <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">assert</span> (checkSplit(ind_tr, ind_va, ind_te))</span><br><span class="line">    <span class="keyword">return</span> ind_tr, ind_va, ind_te</span><br></pre></td></tr></table></figure>

<h2 id="8-Discussion："><a href="#8-Discussion：" class="headerlink" title="8. Discussion："></a>8. Discussion：</h2><p>典型的判别前馈神经网络在药物反应预测中效果不佳，很可能是由于数据限制（特征数量与样本数量）所致。 我们表明，<strong>药物反应和扰动效应的联合生成模型</strong>在很大程度上缓解了这种情况，<strong>可能起到了有效的正则化和鲁棒的特征提取的作用</strong>，而不会产生过拟合的情况。</p>
<h3 id="局限性："><a href="#局限性：" class="headerlink" title="局限性："></a>局限性：</h3><ol>
<li>只考虑基因表达方式，<strong>没有额外整合</strong>甲基化、拷贝数变化、相互作用状态的<strong>多组预测因子。</strong></li>
<li>我们在每种药物最常见的浓度水平下，对治疗6小时后的CMap-L1000v1扰动进行建模。有人认为，<strong>6小时太短，许多反馈调节机制无法体现自己，因此这些实验本身并不能提供完整的转录反应图片</strong>。值得注意的是，药物细胞系活力测定通常在较长的治疗时间（如72小时）内完成。因此，我们也用24小时的微扰实验来训练我们的VAE博士，然而，<strong>由于这样的实验数量有限</strong>，这并没有提高我们的预测性能。</li>
<li>Dr.VAE所组成的每一个条件分布都是由一个神经网络参数化的。调整超参数以匹配数据复杂性的能力使Dr.VAE成为一个非常灵活的模型。<strong>由于我们选择了简单性，我们的神经网络大多有一个隐藏层，而分类后验函数和扰动函数是线性的。</strong> 然而，到目前为止，我们试图通过更复杂的分布使用更深的网络或使用规范化流来近似后验的尝试，<strong>并没有显著地提高性能来证明增加的复杂性。</strong></li>
</ol>
<hr>
<h2 id="预备-amp-补充知识："><a href="#预备-amp-补充知识：" class="headerlink" title="预备&amp;补充知识："></a>预备&amp;补充知识：</h2><h3 id="什么是VAE-Variational-auto-encoder、变分自编码器-？"><a href="#什么是VAE-Variational-auto-encoder、变分自编码器-？" class="headerlink" title="什么是VAE(Variational auto-encoder、变分自编码器)？"></a>什么是VAE(Variational auto-encoder、变分自编码器)？</h3><p>一个可以和GAN相媲美的生成网络。<br>VAE通过说我希望生成一张新的猫脸，那么这个n维向量代表的就是n个决定最终猫脸模样的隐形因素。对于每个因素，都对应产生一种分布，从这些分布关系中进行采样，那么我就可以通过一个深度网络恢复出最终的猫脸。<br>通过一个网络，将一个高维空间的人脸映射为低维空间的一个向量。那么如果我将这个向量定义为四维，采用one-hot的表达方式表达四张不同的脸，那么这个网络就可以表达四个脸，你输入不同的数据，他就会输出不同的脸来。</p>
<h4 id="VAE有什么用？"><a href="#VAE有什么用？" class="headerlink" title="VAE有什么用？"></a>VAE有什么用？</h4><p>VAE到底有什么用呢，就为了把大量的数据存储到网络结构中去呀，当然不能是这么简单的一个事。想象一下，在一个末日大片中，我们需要去搞出一个许多机器人占领世界的场面，但是我们的特效师一张张去画，这无疑会是一个令人头疼的工作，利用VAE，只需要使用有限的数据输入，我们就可以通过隐形参数的调节，获得几乎无限的数量。</p>
<h4 id="VAE网络结构组成："><a href="#VAE网络结构组成：" class="headerlink" title="VAE网络结构组成："></a>VAE网络结构组成：</h4><p>可以大致分成<strong>Encoder</strong>和<strong>Decoder</strong>两部分。对于输入图片，Encoder将提取得到编码：一个<strong>mean vector</strong>（均值）和一个<strong>deviation vector</strong>（方差），然后将这个编码（两个vector）作为Decoder的输入，最终输出一张和原图相近的图片。</p>
<p>它本质上就是在我们常规的自编码器的基础上，对 encoder 的结果（在VAE中对应着计算均值的网络）加上了<strong>“高斯噪声”</strong>，使得结果 decoder 能够对噪声有鲁棒性；而那个额外的 KL loss（目的是让均值为 0，方差为 1），事实上就是相当于对 encoder 的一个正则项，希望 encoder 出来的东西均有零均值。</p>
<p>drug perturbation effects是什么?</p>
<h3 id="ablation-study消融实验"><a href="#ablation-study消融实验" class="headerlink" title="ablation study消融实验:"></a>ablation study消融实验:</h3><p>论证是什么起了作用，类似于中学学的控制变量<br>模型简化测试。<br>看看取消掉一些模块后性能有没有影响。</p>
<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><h4 id="文章："><a href="#文章：" class="headerlink" title="文章："></a>文章：</h4><p><a href="https://blog.csdn.net/weixin_40955254/article/details/82315224" target="_blank" rel="noopener">https://blog.csdn.net/weixin_40955254/article/details/82315224</a><br><a href="https://blog.csdn.net/cjh_jinduoxia/article/details/84995156" target="_blank" rel="noopener">https://blog.csdn.net/cjh_jinduoxia/article/details/84995156</a></p>
<h4 id="视频："><a href="#视频：" class="headerlink" title="视频："></a>视频：</h4><p>（白板推导）<a href="https://www.bilibili.com/video/BV15E411w7Pz" target="_blank" rel="noopener">https://www.bilibili.com/video/BV15E411w7Pz</a></p>
]]></content>
      <categories>
        <category>DeepLearning</category>
      </categories>
      <tags>
        <tag>srf</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud</title>
    <url>/2020/02/15/springcloud/</url>
    <content><![CDATA[<p>纯洁的微笑关于springcloud的知识是2017年的</p>
<p>在使用了一段时间后发现Spring Cloud从技术架构上降低了对大型系统构建的要求，使我们以非常低的成本（技术或者硬件）搭建一套高效、分布式、容错的平台，但Spring Cloud也不是没有缺点，小型独立的项目不适合使用。</p>
<p>Spring并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p>
<ol>
<li>大话Spring Cloud 核心成员的介绍</li>
</ol>
<p>目前，国内使用 Spring Cloud 技术的公司并不多见，不是因为 Spring Cloud 不好，主要原因有以下几点：</p>
<ol>
<li>Spring Cloud 中文文档较少，出现问题网上没有太多的解决方案。</li>
<li>国内创业型公司技术老大大多是阿里系员工，而阿里系多采用 Dubbo 来构建微服务架构。（阿里已经采用了）</li>
<li>大型公司基本都有自己的分布式解决方案，而中小型公司的架构很多用不上微服务，所以没有采用 Spring Cloud 的必要性。</li>
</ol>
]]></content>
      <categories>
        <category>后台开发</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Web小项目(react调试和部署)</title>
    <url>/2020/02/26/web%E5%B0%8F%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="如何在本地调试react项目"><a href="#如何在本地调试react项目" class="headerlink" title="如何在本地调试react项目"></a>如何在本地调试react项目</h2><blockquote>
<p>在项目终端下(pycharm)运行 <figure class="highlight plain"><figcaption><span>install```**安装依赖**</span></figcaption><table><tr><td class="code"><pre><span class="line">项目会生成**node_modules**目录</span><br><span class="line"></span><br><span class="line">我们在在项目终端下(pycharm)运行</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>npm start</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">浏览器会自动打开http://localhost:3000运行调试</span><br><span class="line"></span><br><span class="line">## 如何将本地的react项目部署到云服务器上</span><br><span class="line">我们在在项目终端下(pycharm)运行</span><br></pre></td></tr></table></figure>

<p>npm run build</p>
<pre><code>项目会生成了一个**build**目录

打开宝塔服务器页面，到相关网站下，将build页面下==static上传，以及和static平行的文件上传。==

至此，大功告成！
tips:感觉网上的教程大多数很复杂，暂时也不太明白他们做的原理(TODO)</code></pre>]]></content>
  </entry>
  <entry>
    <title>yc的聊天器（NIO）</title>
    <url>/2020/02/05/yc%E7%9A%84%E8%81%8A%E5%A4%A9%E5%99%A8%EF%BC%88Ubuntu%EF%BC%89/</url>
    <content><![CDATA[<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本机client编号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> thisClientNumber = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端多路选择器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Selector selector;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端和服务端连接channel</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> SocketChannel socketChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 聊天工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> ChartUtil chartUtil;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Client client = <span class="keyword">new</span> Client();</span><br><span class="line">    client.initial();</span><br><span class="line">    client.inputThread();</span><br><span class="line">    client.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.nio.ByteBuffer;</span><br><span class="line">import java.nio.channels.SelectionKey;</span><br><span class="line">import java.nio.channels.Selector;</span><br><span class="line">import java.nio.channels.SocketChannel;</span><br></pre></td></tr></table></figure>

<p>从通道读取：创建一个缓冲区，然后请求通道读取数据。<br>通道写入：创建一个缓冲区，填充数据，并要求通道写入数据。</p>
<p><strong>核心部件</strong></p>
<ul>
<li>Channel</li>
<li>Buffer</li>
<li><em>Selector</em></li>
</ul>
<p><strong>通道列表</strong></p>
<ul>
<li>DatagramChannel</li>
<li><em>SocketChannel</em></li>
<li>FileChannel</li>
<li>ServerSocketChannel</li>
</ul>
<p><strong>缓冲列表</strong></p>
<ul>
<li>CharBuffer</li>
<li>DoubleBuffer</li>
<li>IntBuffer</li>
<li>LongBuffer</li>
<li><em>ByteBuffer</em></li>
<li>ShortBuffer</li>
<li>FloatBuffer</li>
</ul>
<p><strong>选择器</strong><br>Java NIO提供了“选择器”的概念。这是一个可以用于监视多个通道的对象，如数据到达，连接打开等。因此，单线程可以监视多个通道中的数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initial</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    selector = Selector.open();</span><br><span class="line">    socketChannel = SocketChannel.open();</span><br><span class="line">    socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">    chartUtil = <span class="keyword">new</span> ChartUtil();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TODO:接着看完</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>做一个简单的操作系统和相关知识理解</title>
    <url>/2019/10/14/%E4%B8%80%E4%B8%AA%E9%9D%9E%E5%B8%B8%E7%AE%80%E5%8D%95%E7%9A%84%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>下载：nasm，VMware<br>NASM是一个为可移植性与模块化而设计的一个80x86的汇编器</p>
<blockquote>
<p>汇编器（Assembler）是将汇编语言翻译为机器语言的程序。一般而言，汇编生成的是目标代码，需要经链接器（Linker）生成可执行代码才可以执行。</p>
</blockquote>
<h3 id="原理性："><a href="#原理性：" class="headerlink" title="原理性："></a>原理性：</h3><p>操作系统如何被启动？</p>
<ul>
<li>第一步：读取BIOS<br>按下电源按钮后，计算机首先读取一块ROM芯片，这块芯片里的程序是”基本输入输出系統”<strong>（Basic Input/Output System）</strong>，即BIOS.</li>
<li>第二步：<strong>硬件</strong>自检<br>BIOS会检查计算机硬件是否满足运行条件，如果硬件出现问题，主板会发出不同含义的蜂鸣，启动中止。</li>
<li>第三步：启动顺序<br>硬件检查完成后，BIOS会将控制权交给下一阶段的启动程序，注意，“下一阶段的启动程序”可能存放在硬盘中，也可能存放在CD/DVD中，或者软盘中等等，可以设置BIOS选择从哪个设备启动。</li>
<li>第四步：主引导记录<br>BIOS找到了“下一阶段的启动程序”所在设备，会读取该设备的第一个扇区，即读取最前面的512字节，称为主引导记录。主引导记录会告诉计算机下一步到哪里去找操作系统。</li>
<li>第五步：bootloader<br>计算机读取”主引导记录”前面446字节的机器码之后，运行事先安装的“启动管理器”bootloader，由用户选择启动哪个操作系统。如果你安装了多个操作系统，那么就要从这步做出选择了。</li>
<li>第六步：加载内核<br>好了，选择操作系统（内核）后，会加载内核，下面就交给内核去处理了。</li>
</ul>
<hr>
<p>我们使用虚拟机来启动操作系统，上面的第一步和第二步我们不做，由虚拟机去完成；第三步“启动顺序”我们选择从软盘启动（我们用镜像代替，并不是真的软盘），需要对虚拟机做下设置，选择从软盘启动。下面重点来看第四步，我们写一下“主引导记录”，让BIOS读取我们写的主引导记录。</p>
<hr>
<h2 id="实践性"><a href="#实践性" class="headerlink" title="实践性"></a>实践性</h2><p>nasm下载地址：// 可能是老版本了</p>
<blockquote>
<p><a href="http://www.nasm.us/pub/nasm/releasebuilds/2.11.02/win32/nasm-2.11.02-installer.exe" target="_blank" rel="noopener">http://www.nasm.us/pub/nasm/releasebuilds/2.11.02/win32/nasm-2.11.02-installer.exe</a></p>
</blockquote>
<p>文件名  boot.asm</p>
<blockquote>
<p> org 7c00h               ; BIOS读入MBR后，从0x7c00h处开始执行<br>; 下面部分和10h有关中断，10h中断用来显示字符<br>mov ax, cs<br>mov es, ax<br>mov ax, msg<br>mov bp, ax                    ; ES:BP表示显示字符串的地址<br>mov cx, msgLen                ; CX存字符长度<br>mov ax, 1301h                 ; AH=13h表示向TTY显示字符，AL=01h表示显示方式（字符串是否包含显示属性，01h表示不包含）<br>mov bx, 000fh                 ; BH=00h表示页号，BL=0fh表示颜色<br>mov dl, 0                     ; 列<br>int 10h<br>msg: db “hello world, welcome to OS!”<br>msgLen: equ $ - msg           ; 字符串长度<br>times 510 - ($ - $$) db 0     ; 填充剩余部分<br>dw 0aa55h                     ; 魔数，必须有这两个字节BIOS才确认是MBR</p>
</blockquote>
<p>在nasm中编译</p>
<blockquote>
<p>nasm boot.asm -o boot.bin<br>生成 Boot.img文件</p>
</blockquote>
<p>在VM上创建新的虚拟机，其余都一样，在软盘驱动器（添加），选择文件，启动便可。</p>
<p><img src="C:%5CUsers%5CAdministrator%5CDesktop%5CJava%5Chello.png" alt="avatar"></p>
<p>something：</p>
<ol>
<li>底层的计算机语言</li>
<li>软盘</li>
</ol>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>sth.interesting</tag>
      </tags>
  </entry>
  <entry>
    <title>人脸识别的项目</title>
    <url>/2020/02/03/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E7%9A%84%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>安装包的过程异常艰难<br><strong>缺失文件haarcascades—各种分类器xml文件下载地址</strong><br>在github上面下载的速度实在是太慢了</p>
<blockquote>
<p>链接：<a href="https://pan.baidu.com/s/1UECA2mPDwqMrhLfWaRTi8g" target="_blank" rel="noopener">https://pan.baidu.com/s/1UECA2mPDwqMrhLfWaRTi8g</a><br>提取码：gqvl </p>
</blockquote>
<p><strong>安装dlib模块踩坑</strong><br>网上各种各样的方法，boost,cmake,还需要VS，非常十分复杂，我怀着想要简约一些的方式开始bing。</p>
<p>避开最复杂的做法</p>
<p>找相对简单的做法：<br><em>conda安装最新的dlib</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda install -c menpo dlib=19.9</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda install -c conda-forge dlib</span><br><span class="line">conda install -c conda-forge/label/cf201901 dlib</span><br></pre></td></tr></table></figure>

<h4 id="报错1："><a href="#报错1：" class="headerlink" title="报错1："></a>报错1：</h4><p>网络连接不上</p>
<p><em>windows 通过whl文件安装dlib</em></p>
<blockquote>
<p><a href="https://blog.csdn.net/weixin_39954229/article/details/81878864" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39954229/article/details/81878864</a><br>可以下载这个dlib-19.7.0-cp36-cp36m-win_amd64.whl</p>
</blockquote>
<blockquote>
<p><a href="https://www.jianshu.com/p/8296f2aac1aa" target="_blank" rel="noopener">https://www.jianshu.com/p/8296f2aac1aa</a><br>中可以下载dlib-19.8.1-cp36-cp36m-win_amd64.whl</p>
</blockquote>
<blockquote>
<p><a href="https://pypi.org/simple/dlib/" target="_blank" rel="noopener">https://pypi.org/simple/dlib/</a> 这链接几乎啥版本都有</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install D:\Downloads\dlib-19.7.0-cp36-cp36m-win_amd64.whl</span><br><span class="line">一定要注意文件的路径</span><br></pre></td></tr></table></figure>

<h4 id="报错2："><a href="#报错2：" class="headerlink" title="报错2："></a>报错2：</h4><p>ERROR: dlib-19.7.0-cp36-cp36m-win_amd64.whl is not a supported wheel on this platform.</p>
<p>原因1：版本不匹配（Python和包（库）不兼容）<br>如何查看<br>参照博客<a href="https://blog.csdn.net/xiuxiuen_michelle/article/details/81080694" target="_blank" rel="noopener">https://blog.csdn.net/xiuxiuen_michelle/article/details/81080694</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line">import pip._internal</span><br><span class="line">print(pip._internal.pep425tags.get_supported())</span><br></pre></td></tr></table></figure>

<p>发现了问题，cp37才可以，之前是cp36的，以上提供的版本对Python来说无用。</p>
<p>感人的是，知乎上Python回答者居然提供了cp37的</p>
<blockquote>
<p><a href="https://pan.baidu.com/s/1MKqW7WH2XP-J8MOLeq3cDA" target="_blank" rel="noopener">https://pan.baidu.com/s/1MKqW7WH2XP-J8MOLeq3cDA</a><br>提取码：rfh8</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install D:\Downloads\dlib-19.17.99-cp37-cp37m-win_amd64.whl</span><br></pre></td></tr></table></figure>

<p><strong>安装face_recognition人脸识别库</strong><br>安装了dlib后还是安装不成功</p>
<p>方法一：先安装cmake再安装face_recognition<br>但是cmake也不能直接pip,cmake的安装非常复杂（stop）<br>方法二：用whl文件<br>官网<a href="https://pypi.org/project/pip/20.0.2/#files下载" target="_blank" rel="noopener">https://pypi.org/project/pip/20.0.2/#files下载</a><br>pip-20.0.2-py2.py3-none-any.whl<br>好蠢啊，看错了，下错了，又因为网速实在不给力</p>
<p>直接在官网内搜，什么都可以<br>官网<a href="https://pypi.org/project/face_recognition/#files" target="_blank" rel="noopener">https://pypi.org/project/face_recognition/#files</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install D:\Downloads\face_recognition-1.2.3-py2.py3-none-any.whl</span><br></pre></td></tr></table></figure>

<h4 id="报错："><a href="#报错：" class="headerlink" title="报错："></a>报错：</h4><p>Script file ‘D:\Anaconda\Scripts\pip-script.py’ is not present.<br>原因是我下载错了包，安装的时候把原有的pip给卸载了<br>方法一：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">easy_install pip</span><br></pre></td></tr></table></figure>

<p>安装成功</p>
<h4 id="报错：-1"><a href="#报错：-1" class="headerlink" title="报错："></a>报错：</h4><p>UnicodeDecodeError: ‘gbk’ codec can’t decode byte 0x81 in position 4: illegal multibyte sequence</p>
<p>都是编码的问题<br>stackoverflow</p>
<blockquote>
<p>if you will open file with utf-8,then you need write: open(file_name, ‘r’, encoding=’UTF-8’) if you will open file with GBK,then you need do: open(file_name, ‘rb’) hope to solve your problem!</p>
</blockquote>
<blockquote>
<ul>
<li>encoding=’UTF-8’出现了utf-8的报错，加入’rb’无效</li>
<li>没看清楚CSDN博主的错误地方，安装了pip download pyleus<br>pip install pyleus-0.3.0.tar.gz</li>
<li>修改编码错误的地方，改成gbk，或者神奇的gbk10……</li>
</ul>
</blockquote>
<p> 我好傻，一大早将笔记中的D:\Anaconda\Lib\site-packages\dlib-data\shape_predictor_68_face_landmarks.dat当成要下载的下载了，以至于编码一直出现错误</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install D:\Downloads\face_recognition-1.2.3-py2.py3-none-any.whl</span><br></pre></td></tr></table></figure>

<p> 下载速度好慢呐<br>翻墙后就安装上了</p>
<p><strong>缺失文件shape_predictor_68_face_landmarks.dat</strong></p>
<blockquote>
<p><a href="https://pan.baidu.com/s/1Z1a_ud__BWXgCWZeSdpL2g" target="_blank" rel="noopener">https://pan.baidu.com/s/1Z1a_ud__BWXgCWZeSdpL2g</a><br>提取码：lzjy</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\\Anaconda\\Lib\\site-packages\\dlib-data\\shape_predictor_68_face_landmarks.dat</span><br></pre></td></tr></table></figure>

<p><a href="https://www.osgeo.cn/pygis/basemap-eqexam.html" target="_blank" rel="noopener">https://www.osgeo.cn/pygis/basemap-eqexam.html</a><br>地图绘制</p>
<p>需要Python的配置文件，这里都有<br>python!<br><a href="https://my.oschina.net/chenmoxuan/blog/1827753" target="_blank" rel="noopener">https://my.oschina.net/chenmoxuan/blog/1827753</a><br><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p>
]]></content>
      <categories>
        <category>DeepLearning</category>
      </categories>
      <tags>
        <tag>sth.interesting</tag>
      </tags>
  </entry>
  <entry>
    <title>新浪微博首页爬虫小尝试</title>
    <url>/2019/12/04/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E9%A6%96%E9%A1%B5%E7%88%AC%E8%99%AB%E5%B0%8Fdemo/</url>
    <content><![CDATA[<p>HTTPError 是 URLError的子类<br>URLError</p>
<ol>
<li>连不上服务器</li>
<li>不存在</li>
<li>本地没有网络</li>
<li>HTTPError<br>使用URLError就完事了<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.error</span><br><span class="line">import urllib.request</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    urllib.request.urlopen(&quot;thhp://blog.csdn.net&quot;)</span><br><span class="line">except urllib.error.URLError as e:</span><br><span class="line">    if hasattr(e,&quot;code&quot;): # 判断是否有状态码</span><br><span class="line">        print(e.code)</span><br><span class="line">    if hasattr(e,&quot;reason&quot;): # 原因</span><br><span class="line">        print(e.reason)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="模拟成浏览器"><a href="#模拟成浏览器" class="headerlink" title="模拟成浏览器"></a>模拟成浏览器</h3><p>才被允许爬取，浏览器伪装一般通过报头进行 headers中的 user-agent 这个需要通过F12查找，可以刷新找到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line">url =&quot;https://i.csdn.net/#/uc/collection-list&quot;</span><br><span class="line">header=(&quot;User-Agent&quot;,&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36&quot;)</span><br><span class="line">opener=urllib.request.build_opener()</span><br><span class="line">opener.addheaders=[header]</span><br><span class="line">data=opener.open(url).read()</span><br><span class="line">fh=open(&quot;C:/Users/Administrator/Desktop/hello.html&quot;,&quot;wb&quot;) #html文件的打开方式地址的斜杠是相反的</span><br><span class="line">fh.write(data)</span><br><span class="line">fh.close()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">import urllib.request</span><br><span class="line"></span><br><span class="line">##新浪新闻打不开，用网易新闻代替好了</span><br><span class="line">data=urllib.request.urlopen(&quot;https://news.sina.com.cn/&quot;).read()</span><br><span class="line">data1 = data.decode(&quot;gbk&quot;) # 这个设置为gbk居然可以了 ，这种问题在之后是常常遇到的</span><br><span class="line"></span><br><span class="line"># data1=data.decode(&quot;utf-8&quot;,&quot;ignore&quot;)</span><br><span class="line"># 忽视了的话出现的问题也很不友好！ “ҵʱ±Żվ&quot;”</span><br><span class="line"></span><br><span class="line"># Crrl+F键 可以查找</span><br><span class="line"></span><br><span class="line">pat = &apos;href=&quot;(https://news.sina.com.cn/.*?)&quot;&gt;&apos;</span><br><span class="line">allurl = re.compile(pat).findall(data1)</span><br><span class="line"># for i in allurl</span><br><span class="line"></span><br><span class="line">for i in range(0,len(allurl)):</span><br><span class="line">    try:</span><br><span class="line">        print(&quot;第&quot;+str(i)+&quot;次爬取&quot;)</span><br><span class="line">        thisurl=allurl[i]</span><br><span class="line">        file= &quot;C:/Users/Administrator/Desktop/爬虫/&quot; + str(i)+&quot;.html&quot;</span><br><span class="line">        urllib.request.urlretrieve(thisurl,file)</span><br><span class="line">    except urllib.error.URLError as e:</span><br><span class="line">        if hasattr(e,&quot;code&quot;):</span><br><span class="line">            print(e.code)</span><br><span class="line">        if hasattr(e,&quot;reason&quot;):</span><br><span class="line">            print(e.reason)</span><br><span class="line"># 遇到异常真的直接就崩掉了！</span><br><span class="line"># 这次循环出现问题会跳到下一次循环当中？！</span><br><span class="line"># 循环爬取文章！ 以及伪装浏览器 CSDN</span><br></pre></td></tr></table></figure>

<p>正则表达式的使用： 单引号和双引号的注意点</p>
<h2 id="淘宝爬图"><a href="#淘宝爬图" class="headerlink" title="淘宝爬图"></a>淘宝爬图</h2><p>已经爬不到了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line">import re</span><br><span class="line">keyname=&quot;半身裙&quot;</span><br><span class="line">key=urllib.request.quote(keyname) # 因为无法识别，进行编码操作</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">headers = (&quot;User-Agent&quot;,&quot;&quot;)</span><br><span class="line">opener=urllib.request.build_opener()</span><br><span class="line">opener.addheaders=[headers]</span><br><span class="line">urllib.request.install_opener(opener)</span><br><span class="line"># 不是网址有问题</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">for i in range(1,20): # 爬取0到100页?</span><br><span class="line">    url=&quot;https://s.taobao.com/list?spm=a21bo.2017.201867-links-0.18.5af911d9Vko7z7&amp;q=&quot;+key+&quot;&amp;cat=16&amp;style=grid&amp;seller_type=taobao&amp;bcoffset=0&amp;s=&quot;+str(i*60)</span><br><span class="line">    data=urllib.request.urlopen(url).read().decode(&quot;utf-8&quot;,&quot;ignore&quot;)</span><br><span class="line">    pat=&apos;pic_url&quot;:&quot;//(.*?)&quot;&apos; # 正则表达式还是有问题</span><br><span class="line">    imageurl=re.compile(pat).findall(data)</span><br><span class="line">    print(imageurl)</span><br></pre></td></tr></table></figure>

<p>如何分析url<br><a href="https://s.taobao.com/list?spm=a21bo.2017.201867-links-0.18.5af911d9Vko7z7&amp;q=%E5%8D%8A%E8%BA%AB%E8%A3%99&amp;cat=16&amp;style=grid&amp;seller_type=taobao&amp;bcoffset=0&amp;s=60" target="_blank" rel="noopener">https://s.taobao.com/list?spm=a21bo.2017.201867-links-0.18.5af911d9Vko7z7&amp;q=%E5%8D%8A%E8%BA%AB%E8%A3%99&amp;cat=16&amp;style=grid&amp;seller_type=taobao&amp;bcoffset=0&amp;s=60</a><br><a href="https://s.taobao.com/list?spm=a21bo.2017.201867-links-0.18.5af911d9Vko7z7&amp;q=%E5%8D%8A%E8%BA%AB%E8%A3%99&amp;cat=16&amp;style=grid&amp;seller_type=taobao&amp;bcoffset=0&amp;s=120" target="_blank" rel="noopener">https://s.taobao.com/list?spm=a21bo.2017.201867-links-0.18.5af911d9Vko7z7&amp;q=%E5%8D%8A%E8%BA%AB%E8%A3%99&amp;cat=16&amp;style=grid&amp;seller_type=taobao&amp;bcoffset=0&amp;s=120</a></p>
<p>q到&amp;cat前截止，都是可以变的，是搜索词<br>是为了找规律，以便从一到一百页<br>s !!! s+=60 第一页是0</p>
<p>抓包分析的目的是为了找到真实的js地址，没有在源码中，就一定隐藏在相应js中，最后没有别的尝试的时候才抓包<br>抓包工具 fiddler<br>需要手动配置代理<br>如何抓包 </p>
]]></content>
      <categories>
        <category>Python爬虫</category>
      </categories>
      <tags>
        <tag>Python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>惩罚线性回归模型</title>
    <url>/2020/02/10/%E6%83%A9%E7%BD%9A%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="惩罚线性回归"><a href="#惩罚线性回归" class="headerlink" title="惩罚线性回归"></a>惩罚线性回归</h1><p>产生背景：<br>线性回归可以理解为“拟合”，一般采用普通最小二乘方法OLS（ordinary least square），但是对于拟合问题存在一个过拟合的问题，为了避免这种现象，提出了惩罚线性回归模型，要求模型对于训练数据具有较好的<strong>学习能力</strong>，同时也要<strong>平衡系数参数的惯性能量</strong></p>
<h2 id="岭回归"><a href="#岭回归" class="headerlink" title="岭回归"></a>岭回归</h2><p>通过设置不同大小的alpha，获得最终的预测结果以及ROC曲线，通过比较ROC曲线下的面积（AUC）获得optimal alpha。AUC越大越好。另外一般就取alpha=0.85吧。</p>
<h2 id="求解惩罚线性回归问题"><a href="#求解惩罚线性回归问题" class="headerlink" title="求解惩罚线性回归问题"></a>求解惩罚线性回归问题</h2><p>最小角度回归LARS算法<br>10折交叉验证就是将输入数据且分为10份几乎均等的数据（10折表示10%用于测试，5折表示20%用于测试）</p>
<p>我们采用自己实现的LARS算法，实现求解惩罚线性回归问题。而在python里面有直接的安装包实现lasso（套索）回归型函数。</p>
]]></content>
      <categories>
        <category>ML&amp;DL</category>
      </categories>
      <tags>
        <tag>Dropouts课题(刘世超老师)</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据学习的基本框架</title>
    <url>/2019/11/09/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<ol>
<li><p><strong>数据收集</strong> ： </p>
<blockquote>
<p>多种日志收集工具，如 Flume 、Logstash、Kibana 等</p>
</blockquote>
</li>
<li><p><strong>数据存储</strong></p>
<blockquote>
<p>解决海量半结构化和非结构化数据的存储，衍生了 Hadoop HDFS 、KFS、GFS 等<strong>分布式文件系统</strong><br>一个优秀的数据存储系统需要同时考虑<strong>数据存储和访问</strong>两方面的问题<br>比如你希望能够对数据进行随机访问，这是传统的关系型数据库所擅长的，但却不是分布式文件系统所擅长的，那么有没有一种存储方案能够同时兼具分布式文件系统和关系型数据库的优点，基于这种需求，就产生了 <strong>HBase、MongoDB</strong>。</p>
</blockquote>
</li>
<li><p><strong>数据分析</strong>（最关键的部分）</p>
</li>
</ol>
<blockquote>
<ul>
<li>批处理：对一段时间内海量的离线数据进行统一的处理，对应的处理框架有 Hadoop MapReduce、Spark、Flink 等；</li>
<li>流处理：对运动中的数据进行处理，即在接收数据的同时就对其进行处理，对应的处理框架有 Storm、Spark Streaming、Flink Streaming 等。</li>
</ul>
</blockquote>
<blockquote>
<p>批处理和流处理各有其适用的场景，<strong>时间不敏感或者硬件资源有限</strong>，可以采用批处理；时间敏感和及时性要求高就可以采用流处理。随着服务器硬件的价格越来越低和大家对及时性的要求越来越高，<strong>流处理</strong>越来越普遍，如股票价格预测和电商运营数据分析等。</p>
</blockquote>
<blockquote>
<p>上面的框架都是需要通过编程来进行数据分析，那么如果你不是一个后台工程师，是不是就不能进行数据的分析了？当然不是，<em>大数据是一个非常完善的生态圈，有需求就有解决方案。</em> 为了能够让熟悉 SQL 的人员也能够进行数据的分析，查询分析框架应运而生，常用的有 <strong>Hive 、Spark SQL 、Flink SQL、 Pig、Phoenix</strong> 等。</p>
</blockquote>
<ol start="4">
<li><strong>数据应用</strong><blockquote>
<p>这取决于你实际的业务需求。比如你可以将数据进行<strong>可视化展现</strong>，或者将数据用于<strong>优化你的推荐算法</strong>，比如短视频个性化推荐、电商商品推荐、头条新闻推荐等。当然你也可以将数据用于训练你的<strong>机器学习模型</strong></p>
</blockquote>
</li>
</ol>
<blockquote>
<p>建议：Scala 确实足够的精简和灵活，但其在语言复杂度上略大于 Java，例如隐式转换和隐式参数等概念在初次涉及时会比较难以理解，所以你可以在了解Spark 后再去学习 Scala ，因为类似隐式转换等概念在 Spark 源码中有大量的运用。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">日志收集框架：Flume 、Logstash、Kibana</span><br><span class="line">分布式文件存储系统：Hadoop HDFS</span><br><span class="line">数据库系统：Mongodb、HBase</span><br><span class="line">分布式计算框架：</span><br><span class="line">批处理框架：Hadoop MapReduce</span><br><span class="line">流处理框架：Storm</span><br><span class="line">混合处理框架：Spark、Flink</span><br><span class="line">查询分析框架：Hive 、Spark SQL 、Flink SQL、 Pig、Phoenix</span><br><span class="line">集群资源管理器：Hadoop YARN</span><br><span class="line">分布式协调服务：Zookeeper</span><br><span class="line">数据迁移工具：Sqoop</span><br><span class="line">任务调度框架：Azkaban、Oozie</span><br><span class="line">集群部署和监控：Ambari、Cloudera Manager</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>爬取人民日报新闻文章（根据日期）</title>
    <url>/2019/12/06/%E7%88%AC%E5%8F%96%E4%BA%BA%E6%B0%91%E6%97%A5%E6%8A%A5%E6%96%B0%E9%97%BB%E6%96%87%E7%AB%A0%EF%BC%88%E6%A0%B9%E6%8D%AE%E6%97%A5%E6%9C%9F%EF%BC%89/</url>
    <content><![CDATA[<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetchUrl</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="string">''' 发起网络请求，它可以访问目标 url ，获取目标网页的 html 内容并返回</span></span><br><span class="line"><span class="string">    :param url:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8'</span>,</span><br><span class="line">        <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.get(url, headers=headers)</span><br><span class="line">    r.raise_for_status() <span class="comment"># 获取状态码</span></span><br><span class="line">    r.encoding = r.apparent_encoding <span class="comment"># 编码</span></span><br><span class="line">    <span class="keyword">return</span> r.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPageList</span><span class="params">(year, month, day)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    获取当天报纸的各版面的链接列表</span></span><br><span class="line"><span class="string">    :param year:</span></span><br><span class="line"><span class="string">    :param month:</span></span><br><span class="line"><span class="string">    :param day:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    url = <span class="string">'http://paper.people.com.cn/rmrb/html/'</span> + year + <span class="string">'-'</span> + month + <span class="string">'/'</span> + day + <span class="string">'/nbs.D110000renmrb_01.htm'</span></span><br><span class="line">    html = fetchUrl(url)</span><br><span class="line">    bsobj = bs4.BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">    pageList = bsobj.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'id'</span>: <span class="string">'pageList'</span>&#125;).ul.find_all(<span class="string">'div'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'right_title-name'</span>&#125;)</span><br><span class="line">    linkList = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> pageList:</span><br><span class="line">        link = page.a[<span class="string">"href"</span>]</span><br><span class="line">        url = <span class="string">'http://paper.people.com.cn/rmrb/html/'</span> + year + <span class="string">'-'</span> + month + <span class="string">'/'</span> + day + <span class="string">'/'</span> + link</span><br><span class="line">        linkList.append(url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> linkList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getTitleList</span><span class="params">(year, month, day, pageUrl)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    获取报纸某一版面的文章链接列表</span></span><br><span class="line"><span class="string">    :param year:</span></span><br><span class="line"><span class="string">    :param month:</span></span><br><span class="line"><span class="string">    :param day:</span></span><br><span class="line"><span class="string">    :param pageUrl:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    html = fetchUrl(pageUrl)</span><br><span class="line">    bsobj = bs4.BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">    titleList = bsobj.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'id'</span>: <span class="string">'titleList'</span>&#125;).ul.find_all(<span class="string">'li'</span>)</span><br><span class="line">    linkList = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> title <span class="keyword">in</span> titleList:</span><br><span class="line">        tempList = title.find_all(<span class="string">'a'</span>)</span><br><span class="line">        <span class="keyword">for</span> temp <span class="keyword">in</span> tempList:</span><br><span class="line">            link = temp[<span class="string">"href"</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'nw.D110000renmrb'</span> <span class="keyword">in</span> link:</span><br><span class="line">                url = <span class="string">'http://paper.people.com.cn/rmrb/html/'</span> + year + <span class="string">'-'</span> + month + <span class="string">'/'</span> + day + <span class="string">'/'</span> + link</span><br><span class="line">                linkList.append(url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> linkList</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getContent</span><span class="params">(html)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    解析 HTML 网页，获取新闻的文章内容</span></span><br><span class="line"><span class="string">    :param html:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    bsobj = bs4.BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">    <span class="comment"># 获取文章 标题</span></span><br><span class="line">    title = bsobj.h3.text + <span class="string">'\n'</span> + bsobj.h1.text + <span class="string">'\n'</span> + bsobj.h2.text + <span class="string">'\n'</span></span><br><span class="line">    <span class="comment"># 获取文章 内容</span></span><br><span class="line">    pList = bsobj.find(<span class="string">'div'</span>, attrs=&#123;<span class="string">'id'</span>: <span class="string">'ozoom'</span>&#125;).find_all(<span class="string">'p'</span>)</span><br><span class="line">    content = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> pList:</span><br><span class="line">        content += p.text + <span class="string">'\n'</span></span><br><span class="line">    <span class="comment"># 返回结果 标题+内容</span></span><br><span class="line">    resp = title + content</span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveFile</span><span class="params">(content, path, filename)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    保存文件</span></span><br><span class="line"><span class="string">    :param content: 内容</span></span><br><span class="line"><span class="string">    :param path: 路径</span></span><br><span class="line"><span class="string">    :param filename: 文件名</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">        os.makedirs(path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(path + filename, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_rmrb</span><span class="params">(year, month, day, destdir)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    爬取的日子</span></span><br><span class="line"><span class="string">    :param year:</span></span><br><span class="line"><span class="string">    :param month:</span></span><br><span class="line"><span class="string">    :param day:</span></span><br><span class="line"><span class="string">    :param destdir: 目录</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    pageList = getPageList(year, month, day)</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> pageList:</span><br><span class="line">        titleList = getTitleList(year, month, day, page)</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> titleList:</span><br><span class="line">            <span class="comment"># 获取新闻文章内容</span></span><br><span class="line">            html = fetchUrl(url)</span><br><span class="line">            content = getContent(html)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 生成保存的文件路径及文件名</span></span><br><span class="line">            temp = url.split(<span class="string">'_'</span>)[<span class="number">2</span>].split(<span class="string">'.'</span>)[<span class="number">0</span>].split(<span class="string">'-'</span>)</span><br><span class="line">            pageNo = temp[<span class="number">1</span>]</span><br><span class="line">            titleNo = temp[<span class="number">0</span>] <span class="keyword">if</span> int(temp[<span class="number">0</span>]) &gt;= <span class="number">10</span> <span class="keyword">else</span> <span class="string">'0'</span> + temp[<span class="number">0</span>]</span><br><span class="line">            path = destdir + <span class="string">'/'</span> + year + month + day + <span class="string">'/'</span></span><br><span class="line">            fileName = year + month + day + <span class="string">'-'</span> + pageNo + <span class="string">'-'</span> + titleNo + <span class="string">'.txt'</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 保存文件</span></span><br><span class="line">            saveFile(content, path, fileName)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设定日期，爬取当日的</span></span><br><span class="line">    year = <span class="string">"2020"</span></span><br><span class="line">    month = <span class="string">"01"</span></span><br><span class="line">    day = <span class="string">"06"</span></span><br><span class="line">    <span class="comment"># 路径</span></span><br><span class="line">    destdir = <span class="string">"D:/data"</span></span><br><span class="line"></span><br><span class="line">    download_rmrb(year, month, day, destdir)</span><br><span class="line">    print(<span class="string">"爬取完成："</span> + year + month + day)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python爬虫</category>
      </categories>
      <tags>
        <tag>Python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>爬取网易新闻排行榜</title>
    <url>/2019/12/05/%E7%88%AC%E5%8F%96%E7%BD%91%E6%98%93%E6%96%B0%E9%97%BB%E6%8E%92%E8%A1%8C%E6%A6%9C/</url>
    <content><![CDATA[<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">StringListSave</span><span class="params">(save_path, filename, slist)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    文件保存位置</span></span><br><span class="line"><span class="string">    :param save_path: 地址</span></span><br><span class="line"><span class="string">    :param filename: 文件名</span></span><br><span class="line"><span class="string">    :param slist:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(save_path):</span><br><span class="line">        os.makedirs(save_path)</span><br><span class="line">    <span class="comment"># 以txt存</span></span><br><span class="line">    path = save_path+<span class="string">"/"</span>+filename+<span class="string">".txt"</span></span><br><span class="line">    <span class="keyword">with</span> open(path, <span class="string">"w+"</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> slist:</span><br><span class="line">            fp.write(<span class="string">"%s\t\t%s\n"</span> % (s[<span class="number">0</span>].encode(<span class="string">"utf8"</span>).decode(<span class="string">'utf-8'</span>), s[<span class="number">1</span>].encode(<span class="string">"utf8"</span>).decode(<span class="string">'utf-8'</span>)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Page_Info</span><span class="params">(myPage)</span>:</span></span><br><span class="line">    <span class="string">'''Regex'''</span></span><br><span class="line">    mypage_Info = re.findall(<span class="string">r'&lt;div class="titleBar" id=".*?"&gt;&lt;h2&gt;(.*?)&lt;/h2&gt;&lt;div class="more"&gt;&lt;a href="(.*?)"&gt;.*?&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;'</span>, myPage, re.S)</span><br><span class="line">    <span class="keyword">return</span> mypage_Info</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">New_Page_Info</span><span class="params">(new_page)</span>:</span></span><br><span class="line">    dom = etree.HTML(new_page)</span><br><span class="line">    new_items = dom.xpath(<span class="string">'//tr/td/a/text()'</span>)</span><br><span class="line">    new_urls = dom.xpath(<span class="string">'//tr/td/a/@href'</span>)</span><br><span class="line">    <span class="keyword">assert</span>(len(new_items) == len(new_urls))</span><br><span class="line">    <span class="keyword">return</span> zip(new_items, new_urls)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Spider</span><span class="params">(url)</span>:</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    print(<span class="string">"下载中 "</span>, url)</span><br><span class="line">    myPage = requests.get(url).content.decode(<span class="string">"gbk"</span>)</span><br><span class="line">    myPageResults = Page_Info(myPage)</span><br><span class="line">    save_path = <span class="string">u"网易新闻抓取"</span></span><br><span class="line">    filename = str(i)+<span class="string">"_"</span>+<span class="string">u"新闻排行榜"</span></span><br><span class="line">    StringListSave(save_path, filename, myPageResults)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> item, url <span class="keyword">in</span> myPageResults:</span><br><span class="line">        print(<span class="string">"下载中 "</span>, url)</span><br><span class="line">        new_page = requests.get(url).content.decode(<span class="string">"gbk"</span>)</span><br><span class="line">        newPageResults = New_Page_Info(new_page)</span><br><span class="line">        filename = str(i)+<span class="string">"_"</span>+item</span><br><span class="line">        StringListSave(save_path, filename, newPageResults)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">"开始"</span>)</span><br><span class="line">    start_url = <span class="string">"http://news.163.com/rank/"</span></span><br><span class="line">    Spider(start_url)</span><br><span class="line">    print(<span class="string">"结束"</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python爬虫</category>
      </categories>
      <tags>
        <tag>Python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫之selenium报错——Chromedriver</title>
    <url>/2020/02/25/%E7%88%AC%E8%99%AB%E4%B9%8Bselenium%E6%8A%A5%E9%94%99%E2%80%94%E2%80%94Chromedriver/</url>
    <content><![CDATA[<p><strong>报错信息：</strong></p>
<figure class="highlight plain"><figcaption><span>executable needs to be in PATH.```</span></figcaption><table><tr><td class="code"><pre><span class="line">**解决方法：**</span><br><span class="line">### 关于Chromedriver如何配置环境变量问题解决[^1]</span><br><span class="line">到环境变量中加上‪C:\Program Files (x86)\Google\Chrome\Application</span><br><span class="line"></span><br><span class="line">### windows下更新环境变量不需要重启系统快速生效的方法[^2]</span><br></pre></td></tr></table></figure>

<p>set path=test<br>echo %path%<br>```</p>
<h3 id="如果还没有生效的话-3"><a href="#如果还没有生效的话-3" class="headerlink" title="如果还没有生效的话[^3]"></a>如果还没有生效的话[^3]</h3><p><strong>原来还要放到Python目录下</strong><br>很多人都反应上面两步做了也没有生效</p>
<p>最后……<br>自己入自己的坑，才是最绝望的。chromedriver和chrome 多少是眼残的事……</p>
<p>参考：<br>[^1]: <a href="https://blog.csdn.net/qq_41429288/article/details/80472064" target="_blank" rel="noopener">https://blog.csdn.net/qq_41429288/article/details/80472064</a><br>[^2]: <a href="https://blog.csdn.net/u010770041/article/details/49915089" target="_blank" rel="noopener">https://blog.csdn.net/u010770041/article/details/49915089</a><br>[^3]: <a href="https://blog.csdn.net/weixin_37185329/article/details/80493281" target="_blank" rel="noopener">https://blog.csdn.net/weixin_37185329/article/details/80493281</a></p>
]]></content>
  </entry>
  <entry>
    <title>生涯规划课之如何写一份优秀的简历</title>
    <url>/2020/04/05/%E7%94%9F%E6%B6%AF%E8%A7%84%E5%88%92%E8%AF%BE%E4%B9%8B%E5%A6%82%E4%BD%95%E5%86%99%E4%B8%80%E4%BB%BD%E4%BC%98%E7%A7%80%E7%9A%84%E7%AE%80%E5%8E%86/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输密码叭~</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="bb1e67510c3778568b9929b05c754084948324123e27d36657e6cde0222ab35e">ff97108b41fe8a58044d22451acc7fc5f5615f5013ef8af5c1e71328629f8f5572488f63dfb2dc116af3e7c8a6a774b06d053331ba1b272a05f0fb8d055afa1d6120fcabca3b1a85efc102d27f346739441442af8b5ff936c008582013935ef466ef0295c198b302acca0eb815777ccaa2235e12e13bfb9bba0df090b870903d67df0b61bac99157a8824205ec575dcd5233fe8e8f36a775b4f6002de039294369f0c2570375ed77ce43b01227cb6d8357572bdfc4c986f769436b866886a52c2789e2d49c2485f29b1670fd01666a7fe4634f92b708dbcb9f76ccaaa5a88b3309094780b5eea3cd822d4d872a810070ac54cf495d7fc41c15d40b915a81679a6bff608a9695cb9f11e931f57ed5e1e5ed565335b834ed303a0e0baa06f159c4d882ef7ac611e5d661fa87564625284e9de2276379e1c2fe0739cd9dd4820d8869f5bd2c7aefc3a966db07924ec98dd1c94d276014dae65d7d4e8346007e8c14c0b53022c31548037be09e0d650c434c79b6672f08b829c4337692d2fc2ef429c8699d9cef79fdfb6512cfc5a83d660681d524f0374c9f38a2d83eef7f7c058ca3503c88898c26064d000e7f1012243c4ca665bede251b51c15ad14d344c412be8c290845860f50823a0ada5f007957d85b3777c20302e522d44e640579790579ee2b4ce267b0141365d449d59979b61df92358276394a300b57eec4e6de3c654223e9e8c147dcb40dda0f1d8a58b777a471f69e555d8e18a401625fce7c89ef9eb9bd2255ac7410e8fa9b8be02517114abf0c8c2386ab5942cd8f00b4ee42b064cee9ee85d1f21ff524acb4b7f1ee06a944a0efa1a642f2d80554c4edaedab3bb5c47eab1e28ae4b7888e1cfa4b5519fab2cf12d455d86761c2bf317d2b114f23b7ec45c79c28b67bf0ed13633594db21a6b625bc7975dd32ec104ef392093222ffd93d31a62f0cbb45b71297c640da9ca40d3eaef6f430e650b23d48179aeaa303718046e40b188410ad2d741e9bf0ac0353a384f775ae7dcb4f95a5b219cb61bea77362bdc5c1baeb5f28dc9352c60c51080eebc07ccbc56ee7f6658ec81d9ef7256827cee6307cef8f8fec756496b04e4757aa1afab6e66dcba6227e6d8aaf7e0e43fe45ae812e13dd0d607e28edd20e8b3c1b146829a9f6a9952c2aa7617555c0c710c7cb799ae0121283e06ff1bdf1b4fa9b7cfb7bc7c32ca971e0b30c6d7f1487bf55ae883b089a3f4faf3fd821e18e5763ec3c9ccef96376f17e6f1c78a8f81694e5f4f5cb8e58afda242b9bda333eaa4af815341680090cf4e1d4eeaae2b531f1c4df6b5514d3d295071eb37f3be7489b4214568ab8039d02651d8be7c3c43383d600925b6cb81fa51eb7c2b16ef7ddcdb387fb7cd73432f09c99ec49160d0ba9e673f052ce6c7e69361d746ca51ab4e9d472164991f2e93fe915c611432dcb04f8f70907ed9788e8b063cf1b84704e26face686af2f61c37339de4a09d75c296be6f904ff3b7b4103d9f4db80a2c1ade75e22dfcb5759a1c23077b621b1471edd11136092904461b70988edcedf83ec698d694f58fb40399cb393ae2d9143af61088ea21d3017c5dc1fac016cf807700684fd671645b0db3fdcc367a1eb70ce2b1f739ca887c55005e87125ac750d3d7d928f16e8966a8f143ea4e8ad36c2518630cc06683950a4155dc9c5a598948058b56ae7defb8c3333b1372b1d07765047cfbb5c147a5d843316e2904c2532d1d4409c0ce09329a5f485cbb8f79282f0bcfab27902d3f5eba49b9bd7db5de3d4257162e0c56d9cb1fe43fb09d7ef72d48c5097a806a67d0c738de43daae993deabf69511190b23347909311ddc534d202ac1015e335339f110426f260b6243352abcf562d7fd898d3bd33728667bec167c15e314e21b1a43a241f7e0eab2eb7743827da4de1a1bc4113013631627d1819b09e91ce6a305d98bbec9856ff9d48444481eb5f027057d804d7f47ad3beba7c1909ee8cffe0f0616fb559462924bdb7f9ad547eb070e055753063d5d3adf01c91b7df82b268969ae1956ea8496ab443271be88861ccc50279d2632d48260006cffe5369e2dde481bdc42e848308b6686c4fd56b0776d55fd1869d4c9ea7701f95752be8c328c6c1a6c170017ec43675e89644717db3b39ff5c9b559d541fd343f897351740947c16ab516cba55a2a7966cdff0b528b714e10afecf4ae35d528e1194841d621554abfc9b15495f3b549a89bb573b0f01f5b4e4d0ed374996a487613e69127c4a70da56a53e87b79420bf08c8e7fe576bfb56ebcccde6a95e2a08afd119c615f7dc0cf270fc93edd4d05635cd0ab1ee49bcf5518d6347f270eb897adecd6ea182a003fe0c450ef413ef5a9a924d5a7788d18c89f19db75c5781374d72d1c13412536ad0dcb21346ba1c8467395a8ed3d457f692a6815fa8182af1710edbb3010b7b905f0078afd51e91af1ac146c08fa95075aa2a1624eb63a5d50162aa5598d8f39b6ad7ae6e96bcc68d1f7e45e0c5b60ee3e45e3b06bc20218be82de35baba68b9ed483b3ba251b0766402085272784a6013eda1e58cdf06c0f873a15ec7888545f870ce947af7566652e2595a7c2a692b1ea10d7083cb873d4ca378addda8a17b7af5822c4d4a1f301fe39e7bff0e9ecba6591fd681c4c973a9ff86b5e337253768fe89bc05a9df1e89f6bd61ebbec0e96f8f8a8360e0bd4e6000f65fd91d41b799b5c3c4fea8133bc759a92d39b1f8b863e05379d9d45da51dbfcc90da9ce3ca666652b32e3ca80babe0b98226a656ad2b4ea9537c2b7339fc9560ec2daf340964e1a4f19df05b4e00783fef1e478530caad588c2ca066f9b6a5dc821d4afa26f0dec5aafa2133b2b85a9d8c129961c93e236cb2298b6cff6f77ac2c93dcf2fe2742165b806cfd83aa81e3b73854a8b57b45f2b6b601db7c1ca391c123c59af7e87505b1fcfed670cd5a92530dd848548b1a0432cf3bed9a7ac059613457dec2c5b69a26d29921d9abe6581a270d113056f349337556d494c439fde335653df69195c4ce19c97797af615a10050c0e9bd9670d88e5e407b7b36b2b560e00ab7ff691a8e87ccd5cb65585c00f169d67eaf517298d34010d5f5697986a5f072a71bee9452742efe27c9fb808503a2a5c7e9b8758212b5f7176a8d87a9f65afd920db0e048bae25a0bf1d86a348652d73f5a56cd1afde3408269e84cbb4cb0ca80c537572f03027737147ca82233237d29721bae7d7994ebd2489de7e0b5aaeb510934e5509968ac0ffb75c69a6e7ab083ab8351c9046dff369a1050ee0a6fefbe36fa38d3220e2e949b69fe09c0cdc7c4378d0b8cee437ea7835ce25dba391607cf48fc6cae66b60f99c721f1320e3639af13743ce1ec31beceff7813bf4195d5f88ad775c74cf8418997ba99651a7bbb75ef4dfc90129dde5f559bf177ba745d117cb3d4049fe52c52976cea2929386bff535d4e5ee504c4bf8890d9dc2530e7506b1c879aac6ad09ed132d42d558a6b78f4dc91ca52d7bf83f293c55e99abd1c67579a846eab7529492f041c53ee517a9b1f41803a9d972bcf01854fdd986390b6e02c6f1e55a67b9a4501c02ce570ebf0795d04f2b16b16386f20840dd6510f149c69a2f9dc3e6d4cb24fdfc3c94110eb0fd2c7039be849ed46dc2c77cffba3e8096d5affc4343482a980ecc0e98807c6acdf98346e19ab40df4b727360dccd66966f4b97203524136adcd28602a3cc285203</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>聚类的评估指标</title>
    <url>/2019/12/06/%E8%81%9A%E7%B1%BB%E7%9A%84%E8%AF%84%E4%BC%B0%E6%8C%87%E6%A0%87/</url>
    <content><![CDATA[<ul>
<li>轮廓系数（Silhouette Coefficient）</li>
<li>Calinski-Harabaz 指数</li>
<li>调整兰德系数（Adjusted Rand index，ARI）</li>
<li>互信息（Adjusted Mutual Information，AMI）</li>
<li>V-measure</li>
<li>Fowlkes-Mallows Index（FMI）</li>
</ul>
<h3 id="轮廓系数（Silhouette-Coefficient）"><a href="#轮廓系数（Silhouette-Coefficient）" class="headerlink" title="轮廓系数（Silhouette Coefficient）"></a>轮廓系数（Silhouette Coefficient）</h3><ul>
<li>内部指标</li>
<li>选择合适的聚类数目</li>
<li>根据折线图可直观的找到系数变化幅度最大的点，认为发生畸变幅度最大的点就是最好的聚类数目。</li>
</ul>
<h3 id="Calinski-Harabaz-指数"><a href="#Calinski-Harabaz-指数" class="headerlink" title="Calinski-Harabaz 指数"></a>Calinski-Harabaz 指数</h3><ul>
<li>内部指标</li>
<li>选择合适的聚类数目，运算速度远高于轮廓系数</li>
<li>当内部数据的协方差越小，类别之间的协方差越大，Calinski-Harabasz分数越高。 越大越好</li>
</ul>
<h3 id="调整兰德系数（Adjusted-Rand-index，ARI）"><a href="#调整兰德系数（Adjusted-Rand-index，ARI）" class="headerlink" title="调整兰德系数（Adjusted Rand index，ARI）"></a>调整兰德系数（Adjusted Rand index，ARI）</h3><ul>
<li>外部指标</li>
<li>用来衡量两个分布的吻合程度，取值范围[-1,1],数值越接近于1越好<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from sklearn.metrics import adjusted_rand_score</span><br><span class="line">labels_true = [0, 0, 1, 1, 0, 1] # 这个值是可以由自己设置的</span><br><span class="line">labels_pred = [0, 0, 1, 1, 1, 2]</span><br><span class="line">ari=adjusted_rand_score(labels_true, labels_pred)  </span><br><span class="line">print(&apos;兰德系数为：%f&apos;%(ari))</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="互信息（Adjusted-Mutual-Information，AMI）"><a href="#互信息（Adjusted-Mutual-Information，AMI）" class="headerlink" title="互信息（Adjusted Mutual Information，AMI）"></a>互信息（Adjusted Mutual Information，AMI）</h3><ul>
<li>外部指标</li>
<li>用来衡量两个分布的吻合程度，取值范围[-1,1],数值越接近于1越好<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from sklearn.metrics import adjusted_mutual_info_score</span><br><span class="line">labels_true = [0, 0, 1, 1, 0, 1]</span><br><span class="line">labels_pred = [0, 0, 1, 1, 4, 2]</span><br><span class="line">ami=adjusted_mutual_info_score(labels_true, labels_pred) </span><br><span class="line">print(&apos;互信息为：%f&apos;%(ami))</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="V-measure"><a href="#V-measure" class="headerlink" title="V-measure"></a>V-measure</h3><ul>
<li>外部指标</li>
<li>同质性（homogeneity）：每个群集只包含单个类的成员。</li>
<li>完整性（completeness）：给定类的所有成员都分配给同一个群集。</li>
<li>V-measure是两者的调和平均。V-measure取值范围为 [0,1]，越大越好，但当样本量较小或聚类数据较多的情况，推荐使用AMI和ARI。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from sklearn import metrics</span><br><span class="line">labels_true = [0, 0, 0, 1, 1, 1]</span><br><span class="line">labels_pred = [0, 0, 1, 1, 2, 2]</span><br><span class="line">h_score=metrics.homogeneity_score(labels_true, labels_pred)</span><br><span class="line">c_score=metrics.completeness_score(labels_true, labels_pred) </span><br><span class="line">V_measure=metrics.v_measure_score(labels_true, labels_pred)    </span><br><span class="line">print(&apos;h_score为：%f \nc_score为：%f \nV_measure为：%f&apos;%(h_score,c_score,V_measure))</span><br><span class="line">#h_score为：0.666667 </span><br><span class="line">#c_score为：0.420620 </span><br><span class="line">#V_measure为：0.515804</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Fowlkes-Mallows-Index（FMI）"><a href="#Fowlkes-Mallows-Index（FMI）" class="headerlink" title="Fowlkes-Mallows Index（FMI）"></a>Fowlkes-Mallows Index（FMI）</h3><ul>
<li>外部指标</li>
<li>FMI是对聚类结果和真实值计算得到的召回率和精确率，进行几何平均的结果，取值范围为 [0,1]，越接近1越好。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from sklearn.metrics import fowlkes_mallows_score</span><br><span class="line">labels_true = [0, 0, 0, 1, 1, 1]</span><br><span class="line">labels_pred = [0, 0, 1, 1, 2, 2]</span><br><span class="line">fmi=fowlkes_mallows_score(labels_true, labels_pred)  </span><br><span class="line">print(&apos;FMI为：%f&apos;%(fmi))</span><br><span class="line">#FMI为：0.471405</span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>一般情况下，主要是对无y值的数据进行聚类操作。如果在评价中用到外部指标，就需通过人工标注等方法获取y值，成本较高，因此内部指标的实际实用性更强。</p>
</blockquote>
<p><a href="https://blog.csdn.net/sinat_26917383/article/details/70577710" target="_blank" rel="noopener">https://blog.csdn.net/sinat_26917383/article/details/70577710</a><br>有原理的解释</p>
]]></content>
      <categories>
        <category>ML&amp;DL</category>
      </categories>
      <tags>
        <tag>Dropouts课题(刘世超老师)</tag>
      </tags>
  </entry>
  <entry>
    <title>系统架构设计大纲</title>
    <url>/2020/02/10/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%A4%A7%E7%BA%B2%20/</url>
    <content><![CDATA[<h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><ol>
<li>设计一个<strong>压测工具</strong></li>
<li>设计一个<strong>分布式ID生成器</strong></li>
<li>设计一个<strong>论坛</strong></li>
<li>设计一个<strong>微博</strong></li>
<li>你将如何实现<strong>谷歌搜索</strong>？</li>
<li>设计一个<strong>C/S应用程序，允许人们互相下棋</strong>。</li>
<li>如何将<strong>关系存储</strong>在Facebook这样的社交网络中呢？并实现一个当用户的朋友喜欢与他们一样的东西时，用户会收到通知的功能。</li>
<li>设计<strong>网关</strong>（<a href="https://www.cnblogs.com/rjzheng/p/9220437.html）" target="_blank" rel="noopener">https://www.cnblogs.com/rjzheng/p/9220437.html）</a></li>
<li>如何设计数据库系统，具体地，可以是设计 taobao/Facebook 或是任何公司的<strong>员工数据库</strong>等；</li>
<li>如何设计<strong>用户系统</strong>，具体地，可以是 Netflix/Youtube 的用户系统等；</li>
<li>如何设计<strong>支付系统</strong>，具体地，可以是 alipay 等；</li>
<li>如何设计<strong>短网址系统</strong>，具体地，可以是新浪的短网址等；</li>
<li>如何设计<strong>“秒杀”系统</strong>，具体地，可以是淘宝双十一系统等；</li>
<li><strong>OOD 面向对象系统设计</strong>，具体地，可以是电梯问题、停车问题等；</li>
<li>如何设计<strong>分布式文件系统</strong>，具体地，可以是 google 的文件分布系统 GFS 等；</li>
</ol>
<h2 id="常见方案"><a href="#常见方案" class="headerlink" title="常见方案"></a>常见方案</h2><ul>
<li>最简单粗暴也是实践中最常用的应对方案就是：升级机器、加机器(所以架构的时候要考虑好水平扩展) </li>
<li>大多数应用都是<strong>读大于写</strong>，解决方案很简单：<strong>加缓存+读写分离</strong></li>
<li>对于写大于读的方案，见 (关系型)数据库优化总结</li>
<li><strong>Nginx：</strong>能轻松的处理c100k问题，内存越大，能处理的并发量越高</li>
<li><strong>Redis:</strong> <a href="https://redis.io/topics/benchmarks" target="_blank" rel="noopener">https://redis.io/topics/benchmarks</a> 表明，对于GET/SET来说，QPS 10-100k没啥大问题</li>
<li><strong>MySQL:</strong> <a href="https://www.mysql.com/why-mysql/benchmarks/" target="_blank" rel="noopener">https://www.mysql.com/why-mysql/benchmarks/</a> 表明，对于只读，QPS 几百k没啥问题，<em>对于写，MySQL 5.7 QPS 100k 几乎是上限</em></li>
<li>PG: <a href="https://www.percona.com/blog/2017/01/06/millions-queries-per-second-postgresql-and-mysql-peaceful-battle-at-modern-demanding-workloads/" target="_blank" rel="noopener">https://www.percona.com/blog/2017/01/06/millions-queries-per-second-postgresql-and-mysql-peaceful-battle-at-modern-demanding-workloads/</a> 也是差不多</li>
<li>B, M, G, T, PB之间的关系换算要清楚</li>
<li>需要长时间处理的任务或者是强依赖网络(而网络不确定性大的问题)，妥妥的用队列，例如消息推送</li>
<li>性能优化套路：<strong>加机器 - 加缓存 - 优化数据库索引 - 垂直拆数据库表 - 水平拆数据库表 - 垂直分库 - 水平分库</strong></li>
</ul>
]]></content>
      <categories>
        <category>后台开发</category>
      </categories>
  </entry>
  <entry>
    <title>解决IDEA和Pycharm中Vim插件不能与外界粘贴复制</title>
    <url>/2020/02/22/%E8%A7%A3%E5%86%B3IDEA%E5%92%8CPycharm%E4%B8%ADVim%E6%8F%92%E4%BB%B6%E4%B8%8D%E8%83%BD%E4%B8%8E%E5%A4%96%E7%95%8C%E7%B2%98%E8%B4%B4%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h3><ul>
<li><strong>vim 缓冲区</strong>和<strong>系统剪贴板</strong><br>vim 里面粘贴复制实际上是在vim 缓冲区 存取数据，而系统的ctry+c ctry+v 是与系统剪贴板之间的交互<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3></li>
<li>tools工具下点<strong>vim emulation</strong>，再<strong>重新复制</strong><br>（<em>感觉这的确还是很麻烦，但是暂时没有找到更好的办法了</em>）</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>账号中心</title>
    <url>/2020/02/06/%E8%B4%A6%E5%8F%B7%E4%B8%AD%E5%BF%83/</url>
    <content><![CDATA[<ul>
<li>DAO层：<blockquote>
<p>DAO层叫<strong>数据访问层</strong>，全称为<strong>data access object</strong>，属于一种比较底层，比较基础的操作，具体到对于某个<em>表的增删改查</em>，建议DAO只做原子操作，增删改查。<br>通常我们在DAO层里面写<strong>接口</strong>，里面有与数据打交道的方法。SQL语句通常写在mapper文件里面的。</p>
</blockquote>
</li>
</ul>
<ul>
<li>Controler层：<blockquote>
<p>Controler负责请求转发，接收页面过来的参数，传给<strong>Service</strong>处理，接到返回值，再传给页面。</p>
</blockquote>
</li>
</ul>
<p>@Controller 用于标记在一个类上，使用它标记的类就是一个SpringMVC Controller 对象。分发处理器将会扫描使用了该注解的类的方法。通俗来说，被Controller标记的类就是一个控制器，这个类中的方法，就是相应的动作。</p>
<p>Alt+Insert键可以加入get和set方法</p>
]]></content>
  </entry>
  <entry>
    <title>解析二级域名后看是否生效</title>
    <url>/2020/04/05/%E8%A7%A3%E6%9E%90%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E5%90%8E%E7%9C%8B%E6%98%AF%E5%90%A6%E7%94%9F%E6%95%88/</url>
    <content><![CDATA[<h5 id="阿里云的二级域名解析："><a href="#阿里云的二级域名解析：" class="headerlink" title="阿里云的二级域名解析："></a>阿里云的二级域名解析：</h5><p><strong>解析线路：</strong>选择 默认 （默认为必选项，如未设置会导致部分用户无法访问 )。<br><strong>TTL：</strong>为缓存时间，数值越小，<strong>修改记录各地生效时间越快</strong>，默认为10分钟。</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ping</span> yc.sanzzi.cn</span><br></pre></td></tr></table></figure>

<p>如果生效是以下这样的</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">正在 <span class="built_in">Ping</span> yc.sanzzi.cn [<span class="number">123</span>.<span class="number">57</span>.<span class="number">242</span>.<span class="number">220</span>] 具有 <span class="number">32</span> 字节的数据:</span><br><span class="line">来自 <span class="number">123</span>.<span class="number">57</span>.<span class="number">242</span>.<span class="number">220</span> 的回复: 字节=<span class="number">32</span> 时间=<span class="number">43</span>ms TTL=<span class="number">49</span></span><br><span class="line">来自 <span class="number">123</span>.<span class="number">57</span>.<span class="number">242</span>.<span class="number">220</span> 的回复: 字节=<span class="number">32</span> 时间=<span class="number">43</span>ms TTL=<span class="number">49</span></span><br><span class="line">来自 <span class="number">123</span>.<span class="number">57</span>.<span class="number">242</span>.<span class="number">220</span> 的回复: 字节=<span class="number">32</span> 时间=<span class="number">308</span>ms TTL=<span class="number">49</span></span><br><span class="line">来自 <span class="number">123</span>.<span class="number">57</span>.<span class="number">242</span>.<span class="number">220</span> 的回复: 字节=<span class="number">32</span> 时间=<span class="number">170</span>ms TTL=<span class="number">49</span></span><br><span class="line"></span><br><span class="line"><span class="number">123</span>.<span class="number">57</span>.<span class="number">242</span>.<span class="number">220</span> 的 <span class="built_in">Ping</span> 统计信息:</span><br><span class="line">    数据包: 已发送 = <span class="number">4</span>，已接收 = <span class="number">4</span>，丢失 = <span class="number">0</span> (<span class="number">0</span>% 丢失)，</span><br><span class="line">往返行程的估计时间(以毫秒为单位):</span><br><span class="line">    最短 = <span class="number">43</span>ms，最长 = <span class="number">308</span>ms，平均 = <span class="number">141</span>ms</span><br></pre></td></tr></table></figure>

<p>失败是</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Ping</span> 请求找不到主机 sanzi.sanzzi.cn。请检查该名称，然后重试。</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>递归思想&amp;递归转化成非递归</title>
    <url>/2020/02/18/%E9%80%92%E5%BD%92%E6%80%9D%E6%83%B3&amp;%E9%80%92%E5%BD%92%E8%BD%AC%E5%8C%96%E6%88%90%E9%9D%9E%E9%80%92%E5%BD%92/</url>
    <content><![CDATA[<h2 id="递归理解"><a href="#递归理解" class="headerlink" title="递归理解"></a>递归理解</h2><p><em>递归思想</em>就是：<strong>把问题分解成规模更小，但和原问题有着相同解法的问题。</strong><br><em>典型的问题</em>有<strong>汉诺塔问题，斐波那契数列，二分查找问题，快速排序问题</strong>等。<br>其实像我们常见的<strong>分治法和动态规划法</strong>都是递归思想的经典应用。</p>
<p><strong>最关键的：</strong><br>存在一个能让递归调用退出的<strong>出口</strong>。</p>
<h2 id="递归、循环、迭代、遍历的区别"><a href="#递归、循环、迭代、遍历的区别" class="headerlink" title="递归、循环、迭代、遍历的区别"></a>递归、循环、迭代、遍历的区别</h2><ul>
<li>递归：一个函数反复调用自身的行为，特指函数本身；</li>
<li>循环：满足一定条件下，重复执行某些行为，如while结构；</li>
<li>迭代：按某种规则执行一个序列中的每一项，如for结构；</li>
<li>遍历：按某种规则访问图形结构中每一个节点，特指图形结构。</li>
</ul>
<h2 id="递归过程初分析"><a href="#递归过程初分析" class="headerlink" title="递归过程初分析"></a>递归过程初分析</h2><p>在大多数机器上，每次调用函数时大致要做三个工作：调用前先<strong>保存寄存器</strong>，并在返回时恢复；复制实参；程序必须转向一个新位置执行。<br>其中，具体要保存的内容包括：局部变量、形参、调用函数地址、返回值。那么，如果递归调用N次，就要分配N<em>局部变量、N</em>形参、N<em>调用函数地址、N</em>返回值。这势必是影响效率的。</p>
<h2 id="递归转非递归的方法"><a href="#递归转非递归的方法" class="headerlink" title="递归转非递归的方法"></a>递归转非递归的方法</h2><ol>
<li>第一种情况：<strong>递归转尾递归</strong>的问题，这类问题可以不借助堆栈结构将递归转化为循环结构。</li>
<li>第二种情况：借助堆栈将递归转化为非递归（PS：任何递归都可以借助堆栈转化成非递归，第一种情况严格意义上来说不能看做是一种情况）。<br>其中，第二种情况又可以进一步分为两种转化方法：<ol>
<li>第一种方法：<strong>借助堆栈模拟递归的执行过程。</strong>这种方法几乎是<strong>通用</strong>的方法，因为递归本身就是通过堆栈实现的，我们只要把递归函数调用的局部变量和相应的状态放入到一个栈结构中，在函数调用和返回时做好push和pop操作，就可以了（<strong>模拟快排</strong>的例子）。</li>
<li>第二种方法：借助堆栈的循环结构算法。这种方法常常适用于某些局部变量有依赖关系，且需要重复执行的场景，例如<strong>二叉树的遍历算法</strong>，就采用的这种方法。</li>
</ol>
</li>
</ol>
<p><em>延伸问题:</em><br>在斐波那契数列中，如果兔子永远不死，一直繁衍下去，则怎么解？很明显，这是个大数问题。</p>
<p>参考：<br><a href="https://www.cnblogs.com/bakari/p/5349383.html" target="_blank" rel="noopener">https://www.cnblogs.com/bakari/p/5349383.html</a></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
</search>
